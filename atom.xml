<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoHuang&#39;s Space</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaohuang888.github.io/"/>
  <updated>2020-03-29T12:27:07.255Z</updated>
  <id>https://xiaohuang888.github.io/</id>
  
  <author>
    <name>XiaoHuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「攻略」NazoGame</title>
    <link href="https://xiaohuang888.github.io/2020/03/29/%E3%80%8C%E6%94%BB%E7%95%A5%E3%80%8DNazoGame/"/>
    <id>https://xiaohuang888.github.io/2020/03/29/%E3%80%8C%E6%94%BB%E7%95%A5%E3%80%8DNazoGame/</id>
    <published>2020-03-29T11:30:35.126Z</published>
    <updated>2020-03-29T12:27:07.255Z</updated>
    
    <content type="html"><![CDATA[<p>网站：<a href="http://nazo.one-story.cn/" target="_blank" rel="noopener">http://nazo.one-story.cn/</a></p><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>题面：</p><pre><code>请输入答案</code></pre><p>叫你输入：答案。</p><p><code>key:答案</code></p><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>题面：</p><pre><code>请输 入答案</code></pre><p>叫你输入：入答案。</p><p><code>key:入答案</code></p><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>题面：</p><pre><code>请进入第四关</code></pre><p>改网址：把$3$换成$4$。</p><p><code>key:nazo-4</code></p><h3 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h3><p>题面：</p><pre><code>请进入第五关</code></pre><p>$\rm F12$审查元素：$\rm Console$里有答案：<code>answer: level-five</code>。</p><p><code>key:level-five</code></p><h3 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h3><p>题面：</p><pre><code>NaN == NaN</code></pre><p>$\rm Java$语言里<code>NaN != NaN</code>。</p><p><code>key:false</code></p><h3 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h3><p>题面：</p><pre><code>7414569638527895123852</code></pre><p>看你的键盘数字框，按照他每一行写的比划一边，就是字母的形状。</p><p><code>key:H1Z1</code></p><h3 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h3><p>未完待续。。。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网站：&lt;a href=&quot;http://nazo.one-story.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nazo.one-story.cn/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Level-1&quot;&gt;&lt;a href=&quot;#Level-
      
    
    </summary>
    
    
      <category term="攻略" scheme="https://xiaohuang888.github.io/categories/%E6%94%BB%E7%95%A5/"/>
    
    
      <category term="NazoGame" scheme="https://xiaohuang888.github.io/tags/NazoGame/"/>
    
      <category term="攻略" scheme="https://xiaohuang888.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>「数学」二次函数中项系数大小与图像的关系</title>
    <link href="https://xiaohuang888.github.io/2020/03/23/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8D%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0%E4%B8%AD%E7%B3%BB%E6%95%B0%E5%A4%A7%E5%B0%8F%E4%B8%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://xiaohuang888.github.io/2020/03/23/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8D%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0%E4%B8%AD%E7%B3%BB%E6%95%B0%E5%A4%A7%E5%B0%8F%E4%B8%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2020-03-23T13:19:18.001Z</published>
    <updated>2020-03-30T06:33:33.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>当$a&gt;0$时，二次函数图像开口向上；</p><p>当$a&lt;0$时，二次函数图像开口向下。</p><p>$|a|$越大，则二次函数图像的开口越小；</p><p>$|a|$越小，则二次函数图像的开口越大。</p><p>开口向上，对称轴在$y$轴左边，$b&gt;0$；</p><p>开口向上，对称轴在$y$轴右边，$b&lt;0$；</p><p>开口向下，对称轴在$y$轴左边，$b&lt;0$；</p><p>开口向下，对称轴在$y$轴右边，$b&gt;0$。</p><p>和$y$轴交点在原点上方，$c&gt;0$；</p><p>和$y$轴交点在原点下方，$c&lt;0$。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h3&gt;&lt;p&gt;当$a&amp;gt;0$时，二次函数图像开口向上；&lt;/p&gt;
&lt;p&gt;当$a&amp;lt;0$时，二次函数图像开口向下。&lt;/p&gt;
&lt;p&gt;$|a|$越大，则二
      
    
    </summary>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="二次函数" scheme="https://xiaohuang888.github.io/tags/%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「数学」夹角公式</title>
    <link href="https://xiaohuang888.github.io/2020/03/09/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8D%E5%A4%B9%E8%A7%92%E5%85%AC%E5%BC%8F/"/>
    <id>https://xiaohuang888.github.io/2020/03/09/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8D%E5%A4%B9%E8%A7%92%E5%85%AC%E5%BC%8F/</id>
    <published>2020-03-09T06:21:09.721Z</published>
    <updated>2020-03-09T06:35:04.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>设直线 $l_1$ 、 $l_2$ 的斜率存在，分别为 $k_1$ 、 $k_2$ ，</p><p>$l_1$ 与 $l_2$ 的夹角为 $\theta$ ，则 $\tan \theta=\left|\frac{k_{1}-k_{2}}{1+k_{1} k_{2}}\right|$。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h3&gt;&lt;p&gt;设直线 $l_1$ 、 $l_2$ 的斜率存在，分别为 $k_1$ 、 $k_2$ ，&lt;/p&gt;
&lt;p&gt;$l_1$ 与 $l_2$ 的夹角为 
      
    
    </summary>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="三角函数" scheme="https://xiaohuang888.github.io/tags/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「CF80A」Panoramix&#39;s Prediction</title>
    <link href="https://xiaohuang888.github.io/2020/03/03/%E3%80%8CCF80A%E3%80%8DPanoramix&#39;s%20Prediction/"/>
    <id>https://xiaohuang888.github.io/2020/03/03/%E3%80%8CCF80A%E3%80%8DPanoramix&#39;s%20Prediction/</id>
    <published>2020-03-03T01:43:20.340Z</published>
    <updated>2020-03-03T01:48:25.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="http://codeforces.com/problemset/problem/80/A" target="_blank" rel="noopener">Codeforces</a></p><p>Portal: <a href="https://www.luogu.com.cn/problem/CF80A" target="_blank" rel="noopener">Luogu</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> pri<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> pri<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> pri<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> y <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;http://codeforces.com/problemset/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="Codefoces" scheme="https://xiaohuang888.github.io/tags/Codefoces/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu P6101」[EER2]出言不逊</title>
    <link href="https://xiaohuang888.github.io/2020/03/03/%E3%80%8CLuogu%20P6101%E3%80%8D[EER2]%E5%87%BA%E8%A8%80%E4%B8%8D%E9%80%8A/"/>
    <id>https://xiaohuang888.github.io/2020/03/03/%E3%80%8CLuogu%20P6101%E3%80%8D[EER2]%E5%87%BA%E8%A8%80%E4%B8%8D%E9%80%8A/</id>
    <published>2020-03-03T01:40:26.669Z</published>
    <updated>2020-03-03T01:47:08.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P6101" target="_blank" rel="noopener">Luogu</a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>模拟，先找到在读入字符串内出现次数最多的字符，记录个数，然后以 $2$ 为指数在现有长度上递增，就可以算出答案。</p><p>但是<code>long long</code>会溢出，所以要判断一下，如<code>mx + mx &lt; mx</code>说明已经溢出了，然后就退出答案做个标记，输出的时候$+1$，否则会死循环，至于<code>__int128</code>，我没试过。</p><p>代码纯属是为过而过，没什么可看的。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(2)</span><span class="token comment" spellcheck="true">//不知道为什么，不开会T</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> L<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    cin <span class="token operator">>></span> L<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串排序方便计算出现最多的数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> lst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后要填一个随意的（不会出现的）字符，不然最后一段就不会算进去</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> lst <span class="token operator">></span> mx<span class="token punctuation">)</span> mx <span class="token operator">=</span> i <span class="token operator">-</span> lst<span class="token punctuation">;</span>            lst <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>        now <span class="token operator">+</span><span class="token operator">=</span> mx<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mx <span class="token operator">+</span> mx <span class="token operator">&lt;</span> mx<span class="token punctuation">)</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        mx <span class="token operator">=</span> mx <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//溢出要标记</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P61
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu P6069」[MdOI2020] Group</title>
    <link href="https://xiaohuang888.github.io/2020/03/03/%E3%80%8CLuogu%20P6069%E3%80%8D[MdOI2020]%20Group/"/>
    <id>https://xiaohuang888.github.io/2020/03/03/%E3%80%8CLuogu%20P6069%E3%80%8D[MdOI2020]%20Group/</id>
    <published>2020-03-03T01:32:35.664Z</published>
    <updated>2020-03-03T01:40:43.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P6069" target="_blank" rel="noopener">Luogu</a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们先将题目的式子简化一下：</p><p>$$\begin{aligned}S&amp;=\frac{1}{n} \sum_{i=1}^n(a_i-p)^2\\S&amp;=\frac{1}{n} \sum_{i=1}^n(a_i^2-2a_ip+p^2)\\S&amp;=\frac{1}{n} \sum_{i=1}^n\left(a_i^2-2a_i\times\frac{sum1}{n}+\left(\frac{sum1}{n}\right)^2\right)\\nS&amp;=sum2+\frac{sum1^2}{n}-2\times\frac{sum1^2}{n}\\nS&amp;=sum2-\frac{sum1^2}{n}\end{aligned}$$</p><p>不难发现，要先排序，然后选取<strong>一段连续区间的方差</strong>一定比<strong>选取同样个数的不连续区间的方差</strong>小。所以我们可以二分答案（区间的长度），然后连续取每一段区间逐一判断就好了，时间复杂度为$\mathbb{O(n \log n)}$。</p><p>修改的数不用管，因为你可以修改成任意一个数。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> int __int128</span><span class="token comment" spellcheck="true">//不开int128会炸</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> sum1<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> sum2<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>LL ans<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//int128必须快读</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>LL x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LL L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> L <span class="token operator">+</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> R <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> L<span class="token operator">++</span><span class="token punctuation">,</span> R<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum2<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">-</span> sum2<span class="token punctuation">[</span>L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>sum1<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">-</span> sum1<span class="token punctuation">[</span>L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum1<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">-</span> sum1<span class="token punctuation">[</span>L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LL l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> n <span class="token operator">-</span> mid<span class="token punctuation">;</span> <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P60
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>「CF80B」Depression</title>
    <link href="https://xiaohuang888.github.io/2020/03/03/%E3%80%8CCF80B%E3%80%8DDepression/"/>
    <id>https://xiaohuang888.github.io/2020/03/03/%E3%80%8CCF80B%E3%80%8DDepression/</id>
    <published>2020-03-03T01:30:27.559Z</published>
    <updated>2020-03-03T01:32:17.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="http://codeforces.com/problemset/problem/80/B" target="_blank" rel="noopener">Codeforces</a></p><p>Portal2: <a href="https://www.luogu.com.cn/problem/CF80B" target="_blank" rel="noopener">Luogu</a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先我们可以确定分针的偏转角度为$m \times 6$（它不受时针影响）。</p><p>时针的话可以先算出自己因整小时影响的偏转角度为$n \times 30$，然后再加上分针的影响为$m \times 0.5$，即偏转角度为$n \times 30 + m \times 0.5$。</p><p>当时间超过半天（<code>12:00</code>）时，要把小时数减去$12$（也就是时针已经转了一圈，角度从$0$开始）。</p><p>输出的时候注意一下就好了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">12</span><span class="token punctuation">)</span> n <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ans1 <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">+</span> m <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算时针偏转角度</span>    <span class="token keyword">int</span> ans2 <span class="token operator">=</span> m <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算分针偏转角度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ans1 <span class="token operator">==</span> ans1<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.0lf %d\n"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf %d\n"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意输出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;http://codeforces.com/problemset/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Codeforces" scheme="https://xiaohuang888.github.io/tags/Codeforces/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>「数学」Menelaus定理与Ceva定理</title>
    <link href="https://xiaohuang888.github.io/2020/01/20/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8DMenelaus%E5%AE%9A%E7%90%86%E4%B8%8ECeva%E5%AE%9A%E7%90%86/"/>
    <id>https://xiaohuang888.github.io/2020/01/20/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8DMenelaus%E5%AE%9A%E7%90%86%E4%B8%8ECeva%E5%AE%9A%E7%90%86/</id>
    <published>2020-01-20T14:29:54.269Z</published>
    <updated>2020-01-24T02:39:08.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><h4 id="rm-Menelaus-定理"><a href="#rm-Menelaus-定理" class="headerlink" title="$\rm Menelaus$定理"></a>$\rm Menelaus$定理</h4><p><img src="https://s2.ax1x.com/2020/01/21/1F6YfH.png" alt=""></p><p>已知三角形$\triangle ABC$被一直线所截，交三条边或三条边的延长线与点$X, Y, Z$点，则有</p><p>$$\frac{AX}{XB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$$</p><p>（注：上图为一种情况，还有一种为“直线不经过三角形的任何一边，即与三角形的交点数为$0$”）</p><p><strong>证明：</strong></p><p><img src="https://s2.ax1x.com/2020/01/23/1Ezerd.png" alt=""></p><p>过点$C$作$CP // DF$交$AB$于$P$，则</p><p>$$\frac{BZ}{ZC}=\frac{BX}{XP}\tag{1}$$</p><p>$$\frac{CY}{YA}=\frac{PX}{XA}\tag{2}$$</p><p>$$(1) \times (2) \rm{得：} \frac{BZ}{ZC}\cdot \frac{CY}{YA}=\frac{BX}{XP}\cdot \frac{PX}{XA}$$</p><p>$$\frac{AX}{XB}\cdot\frac{BZ}{ZC}\cdot\frac{CY}{YA}=1$$</p><h4 id="rm-Menelaus-逆定理"><a href="#rm-Menelaus-逆定理" class="headerlink" title="$\rm Menelaus$逆定理"></a>$\rm Menelaus$逆定理</h4><p>若有三点$X$、$Y$、$Z$分别在边三角形的三边$AB$、$BC$、$CA$或边的延长线上，并且满足$\frac{AX}{XB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$，那么$X$、$Y$、$Z$三点共线。</p><p><strong>（前提：三个点有偶数个点在三角形边上。）</strong></p><p><strong>证明：</strong></p><p><img src="https://s2.ax1x.com/2020/01/23/1Vp0vF.png" alt=""></p><p>假设$X$、$Y$、$Z$三点不共线，直线$ZY$与$AB$交于点$P$。</p><p>根据$\rm Menelaus$定理，</p><p>$$\frac{AP}{PB}\cdot\frac{BZ}{ZC}\cdot\frac{CY}{YA}=1$$</p><p>$$\rm{已知}\frac{AX}{XB}\cdot\frac{BZ}{ZC}\cdot\frac{CY}{YA}=1$$</p><p>$$\therefore \frac{AP}{PB}=\frac{AX}{XB}$$</p><p>$$\therefore P \rm{与} X \rm{重合，即}X\rm{、}Y\rm{、}Z\rm{三点共线}$$</p><h4 id="rm-Ceva-定理"><a href="#rm-Ceva-定理" class="headerlink" title="$\rm Ceva$定理"></a>$\rm Ceva$定理</h4><p><img src="https://s2.ax1x.com/2020/01/22/1ESDV1.png" alt=""></p><p>在三角形$\triangle ABC$任取一点$O$，延长$AO$、$BO$、$CO$分别交对边于$x$、$y$、$z$，则有</p><p>$$\frac{AX}{XB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$$</p><p><strong>证明：</strong></p><p>$\therefore \triangle ADC$被直线$BE$所截，</p><p>根据$\rm Menelaus$定理，</p><p>$$\therefore \frac{CB}{BZ}\cdot\frac{ZO}{OA}\cdot\frac{AY}{YC}=1\tag{1}$$</p><p>$\therefore \triangle ABD$被直线$CX$所截，</p><p>$$\therefore \frac{BC}{CZ}\cdot\frac{ZO}{OA}\cdot\frac{AX}{XB}=1\tag{2}$$</p><p>$$\frac{(2)}{(1)} \rm{得：}\frac{AX}{XB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$$</p><h4 id="rm-Ceva-逆定理"><a href="#rm-Ceva-逆定理" class="headerlink" title="$\rm Ceva$逆定理"></a>$\rm Ceva$逆定理</h4><p>若有三点$X$、$Y$、$Z$分别在边三角形的三边$AB$、$BC$、$CA$或边的延长线上，并且满足$\frac{AX}{XB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$，那么$CX$、$BY$、$AZ$三线共点。</p><p><strong>证明：</strong></p><p><img src="https://s2.ax1x.com/2020/01/23/1VCXng.png" alt=""></p><p>延长$CO$交$AB$于点$P$，则有</p><p>$$\frac{AP}{PB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$$</p><p>$$\rm{已知}\frac{AX}{XB} \cdot \frac{BZ}{ZC} \cdot \frac{CY}{YA}=1$$</p><p>$$\therefore \frac{AP}{PB}=\frac{AX}{XB}$$</p><p>$$\therefore P \rm{与} X \rm{重合，即}CX\rm{、}BY\rm{、}AZ\rm{三线共点}$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h3&gt;&lt;h4 id=&quot;rm-Menelaus-定理&quot;&gt;&lt;a href=&quot;#rm-Menelaus-定理&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="三角形" scheme="https://xiaohuang888.github.io/tags/%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>「数学」三角函数公式以及部分证明</title>
    <link href="https://xiaohuang888.github.io/2019/12/15/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E8%AF%81%E6%98%8E/"/>
    <id>https://xiaohuang888.github.io/2019/12/15/%E3%80%8C%E6%95%B0%E5%AD%A6%E3%80%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E8%AF%81%E6%98%8E/</id>
    <published>2019-12-15T12:51:00.394Z</published>
    <updated>2020-01-23T03:35:06.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="https://s2.ax1x.com/2019/12/15/QhClnK.png" alt=""></p><p>在$Rt\triangle ABC$中，如下有六个三角函数的定义：</p><h4 id="正弦："><a href="#正弦：" class="headerlink" title="正弦："></a>正弦：</h4><p>$$\sin A = \frac{a}{c}$$</p><p>级数表示：$\sin (x)==\sum_{k=0}^{\infty} \frac{(-1)^{k} x^{1+2k}}{(1+2k)!}$</p><h4 id="余弦："><a href="#余弦：" class="headerlink" title="余弦："></a>余弦：</h4><p>$$\cos A = \frac{b}{c}$$</p><p>级数表示：$\cos (x)=\sum_{k=0}^{\infty} \frac{(-1)^{k} x^{2 k}}{(2 k) !}$</p><h4 id="正切："><a href="#正切：" class="headerlink" title="正切："></a>正切：</h4><p>$$\tan A = \frac{a}{b}$$</p><p>级数表示：$\tan (x)=i+2 i \sum_{k=1}^{\infty}(-1)^{k} q^{2 k} \color{gray}\textrm{ for } q=e^{i x}$</p><h4 id="余切："><a href="#余切：" class="headerlink" title="余切："></a>余切：</h4><p>$$\cot A = \frac{b}{a}$$</p><p>级数表示：$\cot (x)=-i-2 i \sum_{k=1}^{\infty} q^{2 k} \color{gray}\text { for } q=e^{i x}$</p><h4 id="正割："><a href="#正割：" class="headerlink" title="正割："></a>正割：</h4><p>$$\sec A = \frac{c}{b}$$</p><p>级数表示：$\sec (x)=-2 \sum_{k=1}^{\infty}(-1)^{k} q^{-1+2 k} \color{gray}\text { for } q=e^{i x}$</p><h4 id="余割："><a href="#余割：" class="headerlink" title="余割："></a>余割：</h4><p>$$\csc A = \frac{c}{a}$$</p><p>级数表示：$\csc (x)=-2 i \sum_{k=1}^{\infty} q^{-1+2 k} \color{gray}\text { for } q=e^{i x}$</p><h4 id="诱导公式"><a href="#诱导公式" class="headerlink" title="诱导公式"></a>诱导公式</h4><p><a href="/addition/sanjiaohanshuyijigongshizhengming/index.html" target="_blank">链接</a></p><h3 id="关系-amp-定理-amp-公式"><a href="#关系-amp-定理-amp-公式" class="headerlink" title="关系 &amp; 定理 &amp; 公式"></a>关系 &amp; 定理 &amp; 公式</h3><h4 id="倒数关系"><a href="#倒数关系" class="headerlink" title="倒数关系"></a>倒数关系</h4><p>$$\cos \alpha \cdot \sec \alpha = 1$$</p><p>$$\sin \alpha \cdot \csc \alpha = 1$$</p><p>$$\tan \alpha \cdot \cot \alpha = 1$$</p><h4 id="平方关系"><a href="#平方关系" class="headerlink" title="平方关系"></a>平方关系</h4><p>$$1 + \tan ^ 2 \alpha = \sec ^ 2 \alpha$$</p><p>$$1 + \cot ^ 2 \alpha = \csc ^ 2 \alpha$$</p><p>$$\sin^2 \alpha + cos ^ 2 \alpha = 1$$</p><h4 id="商的关系"><a href="#商的关系" class="headerlink" title="商的关系"></a>商的关系</h4><p>$$\frac{\sin \alpha}{\cos \alpha} = \frac{\sec \alpha}{\csc \alpha} = \tan \alpha$$</p><p>$$\frac{\cos \alpha}{\sin \alpha} = \frac{\csc \alpha}{\sec \alpha} = \cot \alpha$$</p><h4 id="正弦定理"><a href="#正弦定理" class="headerlink" title="正弦定理"></a>正弦定理</h4><p>$$\frac{a}{\sin A} = \frac{b}{\sin B} = \frac{c}{\sin C} = 2R = D$$</p><p>$R$ 为三角形外切圆半径，$D$ 为三角形外切圆直径。</p><p><strong>证明：</strong></p><p><img src="https://s2.ax1x.com/2019/12/25/lFqL0x.png" alt=""></p><p>如图在 $\triangle ABC$ 中可得 $\sin A = \frac{h}{b}$ 和 $\sin B = \frac{h}{a}$ 。</p><p>$$\therefore h = \sin A \times b, h = \sin B \times a \\\ \therefore \sin A \times b = \sin B \times a \\\ \therefore \frac{\sin A}{a} = \frac{\sin B}{b} \\\ \therefore \frac{a}{\sin A} = \frac{b}{\sin B} \\\ \textrm{同理：} \frac{a}{\sin A} = \frac{c}{\sin C} \\\ \therefore \frac{a}{\sin A} = \frac{b}{\sin B} = \frac{c}{\sin C}$$</p><p><img src="https://s2.ax1x.com/2019/12/29/lKnCNQ.png" alt=""></p><p>如图， $\triangle CDB$ 中线段 $CD$ 经过圆心，所以 $\angle CBD = 90 ^ \circ$ ， $CD = 2R$。</p><p>$$\therefore \sin A = \sin D = \frac{CB}{CD} = \frac{a}{2R} \\\ \therefore \frac{a}{\sin A} = 2R \\\ \textrm{同理：} \frac{b}{\sin B} = 2R, \frac{c}{\sin C} = 2R \\\ \therefore \frac{a}{\sin A} = \frac{b}{\sin B} = \frac{c}{\sin C} = 2R = D$$</p><h4 id="余弦定理"><a href="#余弦定理" class="headerlink" title="余弦定理"></a>余弦定理</h4><p>$$a ^ 2 = b ^ 2 + c ^ 2 - 2bc\cos A, b ^ 2 = a ^ 2 + c ^ 2 - 2ac\cos B, c ^ 2 = a ^ 2 + b ^ 2 - 2ab\cos C \\\ \rm{或} \\\ \cos A = \frac{b ^ 2 + c ^ 2 - a ^ 2}{2bc}, \cos B = \frac{a ^ 2 + c ^ 2 - b ^ 2}{2ac}, \cos C = \frac{a ^ 2 + b ^ 2 - c ^ 2}{2ab}$$</p><p><strong>证明：</strong></p><p><img src="https://s2.ax1x.com/2020/01/16/lxPR10.png" alt=""></p><p>如图，在 $\triangle ABC$ 中，令$\vec{AB} = \vec{c}, \vec{CB} = \vec{a}, \vec{CA} = \vec{b}$。</p><p>$$\therefore \vec{c} = \vec{AB} = \vec{CB} - \vec{CA} = \vec{a} - \vec{b} \\\ \therefore (\vec{c}) ^ 2 = (\vec{a} - \vec{b}) ^ 2 = \vec{a} ^ 2 + \vec{b} ^ 2 - 2 \vec{a} \cdot \vec{b} \\\ \therefore |\vec{c}| ^ 2 = |\vec{a}| ^ 2 + |\vec{b}| ^ 2 - 2 |\vec{a}| \cdot |\vec{b}| \cdot \cos C \\\ \therefore c ^ 2 = a ^ 2 + b ^ 2 - 2ab\cos C \\\ 同理：\cos A = \frac{b ^ 2 + c ^ 2 - a ^ 2}{2bc}, \cos B = \frac{a ^ 2 + c ^ 2 - b ^ 2}{2ac}$$</p><h4 id="和角公式"><a href="#和角公式" class="headerlink" title="和角公式"></a>和角公式</h4><p>$$\sin(\alpha + \beta) = \sin \alpha \cos \beta + \cos \alpha \sin \beta$$</p><p>$$\cos(\alpha + \beta) = \cos \alpha \cos \beta - \sin \alpha \sin \beta$$</p><p>$$\tan(\alpha + \beta) = \frac{\tan \alpha + \tan \beta}{1 - \tan \alpha \tan \beta}$$</p><h4 id="差角公式"><a href="#差角公式" class="headerlink" title="差角公式"></a>差角公式</h4><p>$$\sin(\alpha - \beta) = \sin \alpha \cos \beta - \cos \alpha \sin \beta$$</p><p>$$\cos(\alpha - \beta) = \cos \alpha \cos \beta + \sin \alpha \sin \beta$$</p><p>$$\tan(\alpha - \beta) = \frac{\tan \alpha - \tan \beta}{1 + \tan \alpha \tan \beta}$$</p><h4 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h4><p>$$\sin \alpha+\sin \beta=2 \sin \left(\frac{\alpha+\beta}{2}\right) \cos \left(\frac{\alpha-\beta}{2}\right)$$</p><p>$$\sin \alpha-\sin \beta=2 \sin \left(\frac{\alpha-\beta}{2}\right) \cos \left(\frac{\alpha+\beta}{2}\right)$$</p><p>$$\cos \alpha+\cos \beta=2 \cos \left(\frac{\alpha+\beta}{2}\right) \cos \left(\frac{\alpha-\beta}{2}\right)$$</p><p>$$\cos \alpha-\cos \beta=-2 \sin \left(\frac{\alpha+\beta}{2}\right) \sin \left(\frac{\alpha-\beta}{2}\right)$$</p><h4 id="积化和差"><a href="#积化和差" class="headerlink" title="积化和差"></a>积化和差</h4><p>$$\cos \alpha \sin \beta=\frac{1}{2}[\sin (\alpha+\beta)-\sin (\alpha-\beta)]$$</p><p>$$\sin \alpha \cos \beta=\frac{1}{2}[\sin (\alpha+\beta)+\sin (\alpha-\beta)]$$</p><p>$$\cos \alpha \cos \beta=\frac{1}{2}[\cos (\alpha+\beta)+\cos (\alpha-\beta)]$$</p><p>$$\sin \alpha \sin \beta=-\frac{1}{2}[\cos (\alpha+\beta)-\cos (\alpha-\beta)]$$</p><h4 id="倍角公式"><a href="#倍角公式" class="headerlink" title="倍角公式"></a>倍角公式</h4><p>$$\sin 2 \alpha = 2 \sin \alpha \cos \alpha$$</p><p>$$\cos 2 \alpha = \cos ^ 2 \alpha - \sin ^ 2 \alpha$$</p><p>$$\tan 2 \alpha = \frac{2 \tan \alpha}{1 - \tan ^ 2 \alpha}$$</p><p>$$\cot 2 \alpha=\frac{\cot ^{2} \alpha-1}{2 \cot \alpha}$$</p><p>$$\sec 2 \alpha=\frac{\sec ^{2} \alpha}{1-\tan ^{2} \alpha}$$</p><p>$$\csc 2 \alpha=\frac{1}{2} \sec \alpha \csc \alpha$$</p><h4 id="半角公式"><a href="#半角公式" class="headerlink" title="半角公式"></a>半角公式</h4><p>$$\sin \left(\frac{\alpha}{2}\right) = \sqrt{\frac{1-\cos \alpha}{2}}$$</p><p>$$\cos \left(\frac{\alpha}{2}\right) = \sqrt{\frac{1+\cos \alpha}{2}}$$</p><p>$$\tan \left(\frac{\alpha}{2}\right) = \csc \alpha-\cot \alpha$$</p><p>$$\cot \left(\frac{\alpha}{2}\right) = \csc \alpha+\cot \alpha$$</p><p>$$\sec \left(\frac{\alpha}{2}\right) = \sqrt{\frac{2 \sec \alpha}{\sec \alpha+1}}$$</p><p>$$\csc \left(\frac{\alpha}{2}\right) = \sqrt{\frac{2 \sec \alpha}{\sec \alpha-1}}$$</p><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p><strong>常用三角函数值对照表：</strong></p><div class="mdui-table-fluid theme-post__card__table--flat"><table class="mdui-table mdui-table-hoverable "><thead><tr><th align="center">角$\alpha$</th><th align="center">弧度</th><th align="center">$\sin$值</th><th align="center">$\cos$值</th><th align="center">$\tan$值</th></tr></thead><tbody><tr><td align="center">$0^\circ$</td><td align="center">$0$</td><td align="center">$0$</td><td align="center">$1$</td><td align="center">$0$</td></tr><tr><td align="center">$15^\circ$</td><td align="center">$\frac{\pi}{12}$</td><td align="center">$\frac{\sqrt{6} - \sqrt{2}}{4}$</td><td align="center">$\frac{\sqrt{6} + \sqrt{2}}{4}$</td><td align="center">$2 - \sqrt{3}$</td></tr><tr><td align="center">$22.5^\circ$</td><td align="center">$\frac{\pi}{8}$</td><td align="center">$\frac{\sqrt{2 - \sqrt{2}}}{2}$</td><td align="center">$\frac{\sqrt{2 + \sqrt{2}}}{2}$</td><td align="center">$-1 + \sqrt{2}$</td></tr><tr><td align="center">$30^\circ$</td><td align="center">$\frac{\pi}{6}$</td><td align="center">$\frac{1}{2}$</td><td align="center">$\frac{\sqrt{3}}{2}$</td><td align="center">$\frac{\sqrt{3}}{3}$</td></tr><tr><td align="center">$45^\circ$</td><td align="center">$\frac{\pi}{4}$</td><td align="center">$\frac{\sqrt{2}}{2}$</td><td align="center">$\frac{\sqrt{2}}{2}$</td><td align="center">$1$</td></tr><tr><td align="center">$60^\circ$</td><td align="center">$\frac{\pi}{3}$</td><td align="center">$\frac{\sqrt{3}}{2}$</td><td align="center">$\frac{1}{2}$</td><td align="center">$\sqrt{3}$</td></tr><tr><td align="center">$75^\circ$</td><td align="center">$\frac{5\pi}{12}$</td><td align="center">$\frac{\sqrt{6} + \sqrt{2}}{4}$</td><td align="center">$\frac{\sqrt{6} - \sqrt{2}}{4}$</td><td align="center">$2 + \sqrt{3}$</td></tr><tr><td align="center">$90^\circ$</td><td align="center">$\frac{\pi}{2}$</td><td align="center">$1$</td><td align="center">$0$</td><td align="center">$\rm{无}$</td></tr><tr><td align="center">$120^\circ$</td><td align="center">$\frac{2\pi}{3}$</td><td align="center">$\frac{\sqrt{3}}{2}$</td><td align="center">$-\frac{1}{2}$</td><td align="center">$-\sqrt{3}$</td></tr><tr><td align="center">$135^\circ$</td><td align="center">$\frac{3\pi}{4}$</td><td align="center">$\frac{\sqrt{2}}{2}$</td><td align="center">$-\frac{\sqrt{2}}{2}$</td><td align="center">$-1$</td></tr><tr><td align="center">$150^\circ$</td><td align="center">$\frac{5\pi}{6}$</td><td align="center">$\frac{1}{2}$</td><td align="center">$-\frac{\sqrt{3}}{2}$</td><td align="center">$\frac{\sqrt{3}}{3}$</td></tr><tr><td align="center">$180^\circ$</td><td align="center">$\pi$</td><td align="center">$0$</td><td align="center">$-1$</td><td align="center">$0$</td></tr><tr><td align="center">$270^\circ$</td><td align="center">$\frac{3\pi}{2}$</td><td align="center">$-1$</td><td align="center">$0$</td><td align="center">$\rm{无}$</td></tr><tr><td align="center">$360^\circ$</td><td align="center">$2\pi$</td><td align="center">$0$</td><td align="center">$1$</td><td align="center">$0$</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/12/15/QhClnK.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在$
      
    
    </summary>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="三角函数" scheme="https://xiaohuang888.github.io/tags/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「AT1175」ニコニコ文字列</title>
    <link href="https://xiaohuang888.github.io/2019/12/14/%E3%80%8CAT1175%E3%80%8D%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E6%96%87%E5%AD%97%E5%88%97/"/>
    <id>https://xiaohuang888.github.io/2019/12/14/%E3%80%8CAT1175%E3%80%8D%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E6%96%87%E5%AD%97%E5%88%97/</id>
    <published>2019-12-14T02:13:48.358Z</published>
    <updated>2019-12-14T03:15:22.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://dwango2015-prelims.contest.atcoder.jp/tasks/dwango2015_prelims_2" target="_blank" rel="noopener">Atcoder</a></p><p>Portal2: <a href="https://www.luogu.com.cn/problem/AT1175" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>$0$ から $9$ の数字から成る文字列 $S$ が与えられます。</p><p>ある文字列 $X$ について、$X=$”$25$” または $X=$”$2525$” または $X=$”$252525$” …… というふうに “$25$” を何回か繰り返した文字列になっているとき、$X$ はニコニコ文字列であるといいます。 たとえば “$25$” や “$25252525$” はニコニコ文字列ですが、”$123$” や “$225$” はニコニコ文字列ではありません。</p><p>あなたの仕事は、文字列 $S$ について、ニコニコ文字列となるような連続した部分文字列の取り出し方が何通りあるかを答えることです。 文字列として同じであっても、取り出し位置が異なっていれば別々に数えます。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>入力は以下の形式で標準入力から与えられる。</p><p>$S$</p><p>$1$ 行目には、文字列 $S$ が与えられる。Sの長さは $1$ 以上 $100,000$ 以下である。また、$S$ の各文字は $0$ から $9$ の数字のみから成る。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>$1$ 行目には、文字列 $S$ からニコニコ文字列となるような連続した部分文字列を取り出す方法が何通りあるかを出力せよ。</p><p><strong>行末の改行を忘れると不正解と判定されるので注意すること。</strong></p><h3 id="Sample-Input1"><a href="#Sample-Input1" class="headerlink" title="Sample Input1"></a>Sample Input1</h3><pre><code>2525</code></pre><h3 id="Sample-Output1"><a href="#Sample-Output1" class="headerlink" title="Sample Output1"></a>Sample Output1</h3><pre><code>3</code></pre><h3 id="Sample-Input2"><a href="#Sample-Input2" class="headerlink" title="Sample Input2"></a>Sample Input2</h3><pre><code>1251251252525</code></pre><h3 id="Sample-Output2"><a href="#Sample-Output2" class="headerlink" title="Sample Output2"></a>Sample Output2</h3><pre><code>8</code></pre><h3 id="Sample-Input3"><a href="#Sample-Input3" class="headerlink" title="Sample Input3"></a>Sample Input3</h3><pre><code>25225</code></pre><h3 id="Sample-Output3"><a href="#Sample-Output3" class="headerlink" title="Sample Output3"></a>Sample Output3</h3><pre><code>2</code></pre><h3 id="Sample-Input4"><a href="#Sample-Input4" class="headerlink" title="Sample Input4"></a>Sample Input4</h3><pre><code>252252252252252252</code></pre><h3 id="Sample-Output4"><a href="#Sample-Output4" class="headerlink" title="Sample Output4"></a>Sample Output4</h3><pre><code>6</code></pre><h3 id="Sample-Input5"><a href="#Sample-Input5" class="headerlink" title="Sample Input5"></a>Sample Input5</h3><pre><code>20061212</code></pre><h3 id="Sample-Output5"><a href="#Sample-Output5" class="headerlink" title="Sample Output5"></a>Sample Output5</h3><pre><code>0</code></pre><h3 id="Sample-Explain1"><a href="#Sample-Explain1" class="headerlink" title="Sample Explain1"></a>Sample Explain1</h3><p>$S=$”$2525$”のケースです。部分文字列が “$25$” となる取り出し方が 2 通り、”$2525$” となる取り出し方が $1$ 通りあるので合計 $3$ 通りを出力します。</p><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>この問題には部分点が設定されています。</p><p>$N \le 2000$ を満たすデータセット $1$ にすべて正解すると、$30$ 点が得られます。 追加制約のないデータセット $2$ にすべて正解すると、上記のデータセットに加えてさらに $70$ 点が得られ、全体で $100$ 点が得られます。</p><h3 id="Description-in-Chinese"><a href="#Description-in-Chinese" class="headerlink" title="Description in Chinese"></a>Description in Chinese</h3><p>给出由$0 - 9$数字构成的字符串$S$。</p><p>对某个字符串$X$来说，如果$X=$”$25$”或$X=$”$2525$”或$X=$”$252525$”$\cdots \cdots$，$X$像这样由”$25$”重复多次组成，那么就称$X$为<code>niconico</code>字符串。例如”$25$”或”$252525$”就是<code>niconico</code>字符串，而”$123$”或”$225$”不是<code>niconico</code>字符串。</p><p>你的任务是，对于字符串$S$，请回答出$S$中有多少个子串为<code>niconico</code>字符串。即使子串相同，但是如果子串在原串中位置不同，也要分别计入总数中。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们可以先把连续的<code>25</code>都替换从一个字符，如<code>a</code>，然后我们找连续的<code>25</code>，每一段<code>25</code>都可以用组合数计算出<code>niconico</code>的数量。然后累加就可以了。</p><p><strong>坑：注意要开<code>long long</code>。</strong></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>string st<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> st<span class="token punctuation">;</span>    string b <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> st<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">)</span> b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">else</span> b <span class="token operator">=</span> b <span class="token operator">+</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将所有的"25"转化为'a'</span>    b <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止溢出，添加边界</span>    LL l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须要long long</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r <span class="token operator">=</span> i<span class="token punctuation">;</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计数连续一段的价值</span>            l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://dwango2015-prelims.contest.a
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="字符串" scheme="https://xiaohuang888.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="计数" scheme="https://xiaohuang888.github.io/tags/%E8%AE%A1%E6%95%B0/"/>
    
      <category term="Atcoder" scheme="https://xiaohuang888.github.io/tags/Atcoder/"/>
    
  </entry>
  
  <entry>
    <title>『模板』快速读入 &amp; 输出模板</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E6%A8%A1%E6%9D%BF%E3%80%8F%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5%20&amp;%20%E8%BE%93%E5%87%BA%E6%A8%A1%E6%9D%BF/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E6%A8%A1%E6%9D%BF%E3%80%8F%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5%20&amp;%20%E8%BE%93%E5%87%BA%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-12-11T11:59:38.039Z</published>
    <updated>2019-12-13T12:30:59.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mainly"><a href="#Mainly" class="headerlink" title="Mainly"></a>Mainly</h3><p>在卡常<del>（<code>80pts to 100pts</code>）</del>的时候，快速读入 &amp; 输出非常有用，原理就是一位一位读入（输出）。</p><h4 id="快速读入："><a href="#快速读入：" class="headerlink" title="快速读入："></a>快速读入：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp">n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="快速输出："><a href="#快速输出：" class="headerlink" title="快速输出："></a>快速输出：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例：-1"><a href="#用法示例：-1" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token function">write</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="超级输入优化："><a href="#超级输入优化：" class="headerlink" title="超级输入优化："></a>超级输入优化：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token keyword">return</span> p1 <span class="token operator">==</span> p2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">EOF</span> <span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> s <span class="token operator">=</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> s <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例：-2"><a href="#用法示例：-2" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="超级输出优化："><a href="#超级输出优化：" class="headerlink" title="超级输出优化："></a>超级输出优化：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pp <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">-</span> buf <span class="token operator">==</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>pp<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pc</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pc</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">fsh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pp <span class="token operator">-</span> buf<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pp <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例：-3"><a href="#用法示例：-3" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token function">write</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mainly&quot;&gt;&lt;a href=&quot;#Mainly&quot; class=&quot;headerlink&quot; title=&quot;Mainly&quot;&gt;&lt;/a&gt;Mainly&lt;/h3&gt;&lt;p&gt;在卡常&lt;del&gt;（&lt;code&gt;80pts to 100pts&lt;/code&gt;）&lt;/del&gt;的时候，快速读入 &amp;
      
    
    </summary>
    
    
      <category term="模板" scheme="https://xiaohuang888.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="模板" scheme="https://xiaohuang888.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="卡常" scheme="https://xiaohuang888.github.io/tags/%E5%8D%A1%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>『题解』LibreOJ6278 数列分块入门 2</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6278%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%202/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6278%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%202/</id>
    <published>2019-12-11T11:59:38.035Z</published>
    <updated>2019-12-13T12:30:58.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://loj.ac/problem/6278/" target="_blank" rel="noopener">LibreOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给出一个长为$n$的数列，以及$n$个操作，操作涉及区间加法，询问区间内小于某个值$n$的元素个数。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行输入一个数字$n$。</p><p>第二行输入$n$个数字，第$i$个数字为$a_i$，以空格隔开。</p><p>接下来输入$n$行询问，每行输入四个数字$\mathrm{opt}$、$l$、$r$、$c$，以空格隔开。</p><p>若$\mathrm{opt} = 0$，表示将位于$[l, r]$的之间的数字都加$c$。</p><p>若$\mathrm{opt} = 1$，表示询问$[l, r]$中，小于$c ^ 2$的数字的个数。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每次询问，输出一行一个数字表示答案。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 2 2 30 1 3 11 1 3 21 1 4 11 2 3 2</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>302</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$100\%$的数据，$1 \le n \le 50000, -2^{31} \le \mathrm{others}$、$\mathrm{ans} \le 2^{31}-1$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先将数组分块，然后求出每一个块的最大以及最小值，修改是暴力修改边角料，整块的修改块的懒标记。</p><p>查询时，边角料还是暴力处理，对于整块：</p><ol><li><p>如果这个块的最大值小于目标值，那么答案增加块的大小，也就是块里的每个元素都符合要求；</p></li><li><p>如果这个块的最小值大于目标值，那么答案不变，也就是块里每个元素都不符合要求；</p></li><li><p>否则暴力查询。</p></li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> MAXN <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> block<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> bl<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> Max<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> Min<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> tag<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> block<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>        Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>            Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理边角料，并更新修改后每个块的最大值和最小值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        tag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">,</span> Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">,</span> Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//整块修改</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> block<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理边角料</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> block<span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token comment" spellcheck="true">//如果这个块的最大值小于目标值，那么答案增加块的大小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> val<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果这个块的最小值大于目标值，那么答案不变</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">*</span> block<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则暴力查询</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//整块的操作</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//初始化最大值和最小值</span>        Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>        Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算每个位置所属块的编号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出每个块中的最大值和最小值</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i575irc" target="_blank" rel="noopener">https://www.lanzous.com/i575irc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://loj.ac/problem/6278/&quot; target
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="LibreOJ" scheme="https://xiaohuang888.github.io/tags/LibreOJ/"/>
    
  </entry>
  
  <entry>
    <title>『题解』LibreOJ6277 数列分块入门 1</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6277%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%201/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6277%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%201/</id>
    <published>2019-12-11T11:59:38.031Z</published>
    <updated>2019-12-13T12:30:58.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://loj.ac/problem/6277" target="_blank" rel="noopener">LibreOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给出一个长为$n$的数列，以及$n$个操作，操作涉及区间加法，单点查值。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行输入一个数字$n$。</p><p>第二行输入$n$个数字，第$i$个数字为$a_i$，以空格隔开。</p><p>接下来输入$n$行询问，每行输入四个数字$opt$、$l$、$r$、$c$，以空格隔开。</p><p>若$\texttt{opt = 0}$，表示将位于$[l,r]$的之间的数字都加$c$。</p><p>若$\texttt{opt = 1}$，表示询问$a_i$的值（$l$和$c$忽略）。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每次询问，输出一行一个数字表示答案。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 2 2 30 1 3 11 0 1 00 1 2 21 0 2 0</code></pre><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><pre><code>25</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$100\%$的数据，$1 \le n \le 50000, -2^{31} \le others, ans \le 2^{31} - 1$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>分块，先将序列分成$\sqrt{n}$块，区间加法时，整块左右的边角料暴力处理，整的块来更新懒标记。单点求值时，只要把自己的值与它所在的块的懒标记加起来就可以了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> bl<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> tag<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总块数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分块</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果区间不包含任何块</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> bl<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理边角料</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> bl<span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理边角料</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> block<span class="token punctuation">)</span>                    tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新整块的懒标记</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单点求值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i51c8of" target="_blank" rel="noopener">https://www.lanzous.com/i51c8of</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://loj.ac/problem/6277&quot; target=
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="LibreOJ" scheme="https://xiaohuang888.github.io/tags/LibreOJ/"/>
    
  </entry>
  
  <entry>
    <title>『工具』对拍器</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E5%B7%A5%E5%85%B7%E3%80%8F%E5%AF%B9%E6%8B%8D%E5%99%A8/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E5%B7%A5%E5%85%B7%E3%80%8F%E5%AF%B9%E6%8B%8D%E5%99%A8/</id>
    <published>2019-12-11T11:59:38.027Z</published>
    <updated>2019-12-13T12:30:59.108Z</updated>
    
    <content type="html"><![CDATA[<p>我们有一个非常好的方法来检验一个算法是否正确，我们可以先打一个暴力（绝对正确的代码），再写一个数据生的工具。我们可以将暴力的程序与你写的算法进行<strong>对拍</strong>。这样就能比较准确地知道你写的算法的正确性了。</p><p><code>Windows</code>下的对拍命令（<code>.bat</code>文件）：</p><p>无文件输入输出版本：</p><pre><code>:loopgen.exe &gt; data.txt # 数据生成器A.exe &lt;data.txt&gt; A.txt # 目标程序1B.exe &lt;data.txt&gt; B.txt # 目标程序2fc A.txt B.txtif not errorlevel 1 goto looppause:end</code></pre><p>有文件输入输出版本：</p><pre><code>:loopgen.exe # 数据生成器A.exe # 目标程序1B.exe # 目标程序2fc A.txt B.txtif not errorlevel 1 goto looppause:end</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们有一个非常好的方法来检验一个算法是否正确，我们可以先打一个暴力（绝对正确的代码），再写一个数据生的工具。我们可以将暴力的程序与你写的算法进行&lt;strong&gt;对拍&lt;/strong&gt;。这样就能比较准确地知道你写的算法的正确性了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Windows&lt;/
      
    
    </summary>
    
    
      <category term="工具" scheme="https://xiaohuang888.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://xiaohuang888.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="终端" scheme="https://xiaohuang888.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="命令" scheme="https://xiaohuang888.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>『题解』BZOJ2226 [Spoj 5971] LCMSum</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ2226%20[Spoj%205971]%20LCMSum/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ2226%20[Spoj%205971]%20LCMSum/</id>
    <published>2019-12-11T11:59:38.023Z</published>
    <updated>2020-01-22T14:28:24.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2226" target="_blank" rel="noopener">BZOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given $n$, calculate the sum <code>LCM(1,n) + LCM(2,n) + .. + LCM(n,n)</code>, where <code>LCM(i,n)</code> denotes the Least Common Multiple of the integers $i$ and $n$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains $T$ the number of test cases. Each of the next $T$ lines contain an integer $n$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Output $T$ lines, one for each test case, containing the required <code>sum</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>3125</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>1455</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>$1 \le T \le 300000$，$1 \le n \le 1000000$。</p><h2 id="Description-in-Chinese"><a href="#Description-in-Chinese" class="headerlink" title="Description in Chinese"></a>Description in Chinese</h2><p>给定正整数$N$，求<code>LCM(1, N) + LCM(2, N) + ... + LCM(N, N)</code>。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>题目中的式子可以化简为：</p><p>$$\begin{aligned} \sum^{n}_{i = 1}{\text{lcm}(i, n)} &amp; = \sum^{n}_{i = 1}{\frac{i \times n}{\gcd(i, n)}} \\ &amp; = n \times \sum^{n}_{i = 1}{\frac{i}{\gcd(i, n)}} \\ &amp; = n \times \sum_{d | n}\sum_{i = 1}^{n}\frac{i}{d} \times (d == \gcd(i, n)) \\ &amp; = \frac{n}{d} \times \sum_{d | n}\sum^{n}_{i = 1}d == \gcd(i, n) \end{aligned} \\\ \text{当}\gcd(i, n) == 1 \text{时，} \gcd(n - i, n) == 1 (i, n - i \ne 1) \\\ \therefore \frac{n}{d} \times \sum_{d | n}\sum^{n}_{i = 1}d == \gcd(i, n) \\\ = \sum_{i = 1}^{n}i \times (\gcd(i, n) == 1)= n \times \frac{\varphi(d)}{2}$$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">;</span>LL n<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> phi<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">calc_phi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//计算phi函数</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> MAXN<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                phi<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> phi<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">calc_phi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> phi<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">/</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后推出的式子</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> n <span class="token operator">*</span> ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后主题要×n</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i59jdri" target="_blank" rel="noopener">https://www.lanzous.com/i59jdri</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal: &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="BZOJ" scheme="https://xiaohuang888.github.io/tags/BZOJ/"/>
    
      <category term="数论，数学" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E8%AE%BA%EF%BC%8C%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu 3792」由乃与大母神原型和偶像崇拜</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%203792%E3%80%8D%E7%94%B1%E4%B9%83%E4%B8%8E%E5%A4%A7%E6%AF%8D%E7%A5%9E%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%81%B6%E5%83%8F%E5%B4%87%E6%8B%9C/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%203792%E3%80%8D%E7%94%B1%E4%B9%83%E4%B8%8E%E5%A4%A7%E6%AF%8D%E7%A5%9E%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%81%B6%E5%83%8F%E5%B4%87%E6%8B%9C/</id>
    <published>2019-12-11T11:59:38.019Z</published>
    <updated>2019-12-13T12:30:59.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P3792" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一个序列$a$</p><p>每次两个操作：</p><ol><li><p>修改$x$位置的值为$y$；</p></li><li><p>查询区间$[l, r]$是否可以重排为值域上连续的一段。</p></li></ol><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行两个数$n, m$；</p><p>第二行$n$个数表示$a[i]$；</p><p>后面m行每行三个数<code>opt x y</code>，或者<code>opt l r</code>，代表操作。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>如果可以，输出<code>damushen</code>；</p><p>否则输出<code>yuanxing</code>。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>5 51 2 3 4 52 1 52 2 32 3 31 3 62 3 5</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>damushendamushendamushendamushen</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$30\%$的数据，$n, m \le 500$；</p><p>对于$60\%$的数据，$n, m \le 100000$；</p><p>对于$100\%$的数据，$n, m \le 500000$。</p><p>值域$10 ^ 9$；</p><p>时限：$2s$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>这题很明显用线段树解决。</p><p>题目要求的是更新一个点，查询一个区间是否能够一个等差数列，我们可以线段树维护最小值，最大值以及区间平方和，在查询的时候我们先询问出最小值与最大值，为等差数列的头与尾，那么我们可以算出这个数列的长度，与题目给出的是否一致，不一致就可以输出<code>yuanxing</code>。</p><p>然后询问线段树的元素的平方和，与计算的头与尾构成的数列的平方和是否一致。</p><p>但由于<code>long long</code>自然溢出问题，计算时用暴力解决即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x7f7f7f7f</span><span class="token punctuation">,</span> MAXN <span class="token operator">=</span> <span class="token number">2000005</span><span class="token punctuation">,</span> MAXM <span class="token operator">=</span> <span class="token number">500005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> Segtree <span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">define</span> lc rt &lt;&lt; 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> rc rt &lt;&lt; 1 | 1</span>    <span class="token keyword">struct</span> node <span class="token punctuation">{</span>        <span class="token keyword">int</span> Min<span class="token punctuation">,</span> Max<span class="token punctuation">;</span>        LL sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span> tree<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>lc<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>rc<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>lc<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rc<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>lc<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rc<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> val <span class="token operator">*</span> val<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> val<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树更改</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树询问区间最小值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_min</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_min</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树询问区间最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> LL <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树询问区间平方和</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        LL ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Segtree <span class="token operator">::</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            Segtree <span class="token operator">::</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> first <span class="token operator">=</span> Segtree <span class="token operator">::</span> <span class="token function">query_min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> last <span class="token operator">=</span> Segtree <span class="token operator">::</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">!=</span> last <span class="token operator">-</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yuanxing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> first<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> Segtree <span class="token operator">::</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"damushen\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yuanxing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P37
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>「CF630C」Lucky Numbers</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF630C%E3%80%8DLucky%20Numbers/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF630C%E3%80%8DLucky%20Numbers/</id>
    <published>2019-12-11T11:59:38.016Z</published>
    <updated>2020-03-01T12:41:16.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="http://codeforces.com/problemset/problem/630/C" target="_blank" rel="noopener">Codeforces</a></p><p>Portal2: <a href="https://www.luogu.com.cn/problem/CF630C" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The numbers of all offices in the new building of the Tax Office of IT City will have lucky numbers.</p><p>Lucky number is a number that consists of digits $7$ and $8$ only. Find the maximum number of offices in the new building of the Tax Office given that a door-plate can hold a number not longer than $n$ digits.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The only line of input contains one integer $n (1 \le n \le 55)$ — the maximum length of a number that a door-plate can hold.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Output one integer — the maximum number of offices, than can have unique lucky numbers not longer than $n$ digits.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>2</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>6</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>题目要我们构造$1 \sim n$位由$7, 8$的数的个数。我们先来找一找规律：</p><p>位数为$1$时：有$7, 8$，共$2 \times 2 ^ 0 = 2$种；</p><p>位数为$2$时：有$77, 78, 87, 88$，共$2 \times 2 ^ 1 = 4$种；</p><p>位数为$3$时：有$777, 778, 787, 788, 877, 878, 887, 888$共$2 \times 2 ^ 2 = 8$种；</p><p>$\cdots \cdots$</p><p>所以，位数是$n$的总个数是$2 \times 2 ^ {n - 1}$；</p><p>那么位数为$1 \sim n$的总个数为</p><p>$$\begin{aligned} \sum^{n}_{i = 1}{2 \times 2 ^ {i - 1}} &amp; = 2 \times \sum^{n}_{i = 1}{2 ^ {i - 1}} \\\ &amp; = 2 \times (2 ^ {n} - 2) \\\ &amp; = 2 ^ {n + 1} - 2\end{aligned}$$</p><p>于是就解决了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>LL n<span class="token punctuation">;</span><span class="token keyword">inline</span> LL <span class="token function">power</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//求x的y次方</span>    LL ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ret <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推出来的公式</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;http://codeforces.com/problemset/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Codeforces" scheme="https://xiaohuang888.github.io/tags/Codeforces/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu 1349」广义斐波那契数列</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201349%E3%80%8D%E5%B9%BF%E4%B9%89%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201349%E3%80%8D%E5%B9%BF%E4%B9%89%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2019-12-11T11:59:38.012Z</published>
    <updated>2020-01-22T14:28:37.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P1349" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>广义的斐波那契数列是指形如$an=p \times a_{n-1}+q \times a_{n-2}$的数列。今给定数列的两系数$p$和$q$，以及数列的最前两项$a_1$和$a_2$，另给出两个整数$n$和$m$，试求数列的第$n$项$a_n$除以$m$的余数。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入包含一行6个整数。依次是$p$,$q$,$a_1$,$a_2$,$n$,$m$，其中在$p$,$q$,$a_1$,$a_2$整数范围内，$n$和$m$在长整数范围内。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出包含一行一个整数，即$a_n$除以$m$的余数。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>1 1 1 1 10 7</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>6</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>数列第$10$项是$55$，除以$7$的余数为$6$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>基本斐波那契数列矩阵是$T = \begin{bmatrix} 1 &amp; 1 \\\ 1 &amp; 0 \end{bmatrix}$；</p><p>广义斐波那契数列矩阵是$F = \begin{bmatrix} p &amp; 1 \\\ q &amp; 0 \end{bmatrix}$。</p><p>那么要求的就是：</p><p>$$\begin{aligned} F_i &amp; = F_{i - 1} \times T \\\ &amp; = \begin{bmatrix} f_{i - 1} &amp; f_{i - 2} \\\ 0 &amp; 0 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 1 \\\ 1 &amp; 0 \end{bmatrix} \\\ &amp; = \begin{bmatrix} f_{i - 1} + f_{i - 2} &amp; f_{i - 1} \\\ 0 &amp; 0 \end{bmatrix} \\\ &amp; = \begin{bmatrix} f_i &amp; f_{i - 1} \\\ 0 &amp; 0 \end{bmatrix} \end{aligned}$$</p><p>然后就可以用矩阵快速幂来解决了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">struct</span> Matrix <span class="token punctuation">{</span>    LL a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩阵清空</span>        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//单位矩阵</span>        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LL n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> mod<span class="token punctuation">;</span>Matrix F<span class="token punctuation">,</span> a<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">inline</span> LL <span class="token function">Plus</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+</span><span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> mod<span class="token punctuation">)</span> x <span class="token operator">-</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> LL <span class="token function">power</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//快速幂</span>    LL ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>Matrix <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Matrix a<span class="token punctuation">,</span> Matrix b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩阵乘法</span>    Matrix ret<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                ret<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Plus</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> <span class="token function">power</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> Matrix <span class="token function">Matrix_Power</span><span class="token punctuation">(</span>Matrix a<span class="token punctuation">,</span> LL x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩阵快速幂</span>    Matrix ret<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">*</span> a<span class="token punctuation">;</span>        x <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    F<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">,</span> F<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">;</span>    a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span> a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">;</span>    ans <span class="token operator">=</span> F <span class="token operator">*</span> <span class="token function">Matrix_Power</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P13
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="矩阵" scheme="https://xiaohuang888.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="快速幂" scheme="https://xiaohuang888.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>「CF52C」Circular RMQ</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF52C%E3%80%8DCircular%20RMQ/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF52C%E3%80%8DCircular%20RMQ/</id>
    <published>2019-12-11T11:59:38.008Z</published>
    <updated>2019-12-13T12:30:59.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="http://codeforces.com/problemset/problem/52/C" target="_blank" rel="noopener">Codeforces</a></p><p>Portal2: <a href="http://codeforces.com/problemset/problem/52/C" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You are given circular array $a_0, a_1, \cdots, a_{n - 1}$. There are two types of operations with it:</p><ul><li><p>$\textrm{inc}(lf, rg, v)$ — this operation increases each element on the segment $[lf, rg]$ (inclusively) by $v$;</p></li><li><p>$\textrm{rmq}(lf, rg)$ — this operation returns minimal value on the segment $[lf, rg]$ (inclusively).</p></li></ul><p>Assume segments to be circular, so if $n = 5$ and $lf = 3, rg = 1$, it means the index sequence: $3, 4, 0, 1$.</p><p>Write program to process given sequence of operations.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains integer $n (1 \le n \le 200000)$. The next line contains initial state of the array: $a_0, a_1, \cdots, a_{n - 1} ( -10^6 \le ai \le 10^6)$, $a_i$ are integer. The third line contains integer $m (0 \le m \le 200000)$, $m$ — the number of operartons. Next $m$ lines contain one operation each. If line contains two integer $lf, rg (0 \le lf, rg \le n - 1)$ it means rmq operation, it contains three integers $lf, rg, v (0 \le lf, rg \le n - 1; -10^6 \le v \le 10^6)$ — inc operation.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each rmq operation write result for it. Please, do not use <code>%lld</code> specificator to read or write $64$-bit integers in C++. It is preffered to use cout (also you may use <code>%I64d</code>).</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 2 3 443 03 0 -10 12 1</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>100</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们可以用线段树来解决区间<code>RMQ</code>问题，我们在线段树上维护一个最小值与懒标记，这样问题就解决了。</p><p>读入的时候我们可以判断后面一个字符是不是空格，可以直接在快速读入里判断，这样就可以判断出一行有三个数还是两个数。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> opt<span class="token punctuation">;</span><span class="token keyword">namespace</span> Segtree <span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">define</span> ls rt &lt;&lt; 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> rs rt &lt;&lt; 1 | 1</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>    <span class="token keyword">const</span> LL Seg_INF <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> Seg_MAXN <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> SMT <span class="token punctuation">{</span>        LL Min<span class="token punctuation">,</span> tag<span class="token punctuation">;</span>    <span class="token punctuation">}</span> tree<span class="token punctuation">[</span>Seg_MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建立线段树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树修改</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">+</span> tree<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">+</span> tree<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> LL <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树查询</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">+</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        LL ret <span class="token operator">=</span> Seg_INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret <span class="token operator">+</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Segtree<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    opt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断空格</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        l <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> n<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;http://codeforces.com/problemset/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://xiaohuang888.github.io/tags/Codeforces/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>「牛客练习赛53A」超越学姐爱字符串</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8C%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B53A%E3%80%8D%E8%B6%85%E8%B6%8A%E5%AD%A6%E5%A7%90%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8C%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B53A%E3%80%8D%E8%B6%85%E8%B6%8A%E5%AD%A6%E5%A7%90%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2019-12-11T11:59:38.004Z</published>
    <updated>2019-12-13T12:30:59.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://ac.nowcoder.com/acm/contest/1114/A" target="_blank" rel="noopener">Nowcoder</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>超越学姐非常喜欢自己的名字，以至于英文字母她只喜欢$\textrm{“c”}$和$\textrm{“y”}$。因此超越学姐喜欢只含有$\textrm{“c”}$和$\textrm{“y”}$的字符串，且字符串中不能出现两个连续的$\textrm{“c”}$。请你求出有多少种长度为$n$的字符串是超越学姐喜欢的字符串。答案对$1e9 + 7$取模。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入一个整数$n$。</p><p>$1 \le n \le 100000$。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出一个整数表示答案。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>3</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>5</code></pre><h3 id="Sample-Explain"><a href="#Sample-Explain" class="headerlink" title="Sample Explain"></a>Sample Explain</h3><blockquote><p>$\textrm{cyy, cyc, yyy, yyc, ycy}$。</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们通过枚举可以发现</p><p>当$n = 1$时，答案为$2$：<code>c, y</code>；</p><p>当$n = 2$时，答案为$3$：<code>cy, yc, yy</code>；</p><p>当$n = 3$时，答案为$5$：<code>cyy, cyc, yyy, yyc, ycy</code>；</p><p>当$n = 4$时，答案为$8$：<code>yyyy, yyyc, yycy, ycyy, cyyy, cycy, yccy, ycyc</code>；</p><p>当$n = 5$时，答案为$13$：<code>yyyyy, yyyyc, yyycy, yycyy, ycyyy, cyyyy, yycyc, ycyyc, cyyyc, ycycy, cyycy, cycyy, cycyc</code>；</p><p>$\cdots \cdots$</p><p>容易总结出规律：$\textrm{f(i) = f(i - 1) + f(i - 2)}(x \ge 3)$</p><p>在写完代码时，还需要对于$n = 1$时特判。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//特判n = 1的情况</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL x1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL tmp <span class="token operator">=</span> x1<span class="token punctuation">;</span>        x1 <span class="token operator">=</span> x2 <span class="token operator">%</span> mod<span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token punctuation">(</span>x2 <span class="token operator">+</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前两项的和</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> x2 <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不要忘记取余</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://ac.nowcoder.com/acm/contest/
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="动态规划" scheme="https://xiaohuang888.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="找规律" scheme="https://xiaohuang888.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
      <category term="Nowcoder" scheme="https://xiaohuang888.github.io/tags/Nowcoder/"/>
    
  </entry>
  
</feed>
