<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoHuang&#39;s Space</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaohuang888.github.io/"/>
  <updated>2020-01-02T14:09:36.337Z</updated>
  <id>https://xiaohuang888.github.io/</id>
  
  <author>
    <name>XiaoHuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>春节倒计时</title>
    <link href="https://xiaohuang888.github.io/2019/12/31/%E6%98%A5%E8%8A%82%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    <id>https://xiaohuang888.github.io/2019/12/31/%E6%98%A5%E8%8A%82%E5%80%92%E8%AE%A1%E6%97%B6/</id>
    <published>2019-12-31T08:27:53.773Z</published>
    <updated>2020-01-02T14:09:36.337Z</updated>
    
    <content type="html"><![CDATA[<html><head><title>春节倒计时</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><style>.middle{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);text-align:center;user-select:none;}.time{color:#8589ff;text-transform:uppercase;display:flex;justify-content:center;}.time span{padding:0 14px;font-size:0.8rem;}.time span div{font-size:3rem;}@media (max-width:740px){.time span{padding:0 16px;font-size:0.6rem;}.time span div{font-size:2rem;}}</style><meta name="generator" content="Hexo 4.0.0"><link rel="alternate" href="/atom.xml" title="XiaoHuang's Space" type="application/atom+xml"></head><body><div class="middle"><div class="time"><span><div id="d">00</div>Days </span> <span><div id="h">00</div>Hours </span> <span><div id="m">00</div>Minutes </span> <span><div id="s">00</div>Seconds </span></div></div><script>const comingdate = new Date("Jan 25, 2020 00:00:00");const d = document.getElementById("d");const h = document.getElementById("h");const m = document.getElementById("m");const s = document.getElementById("s");const countdown = setInterval(() => {  const now   = new Date();  const des   = comingdate.getTime() - now.getTime();  const days  = Math.floor(des / (1000 * 60 * 60 * 24));  const hours = Math.floor((des % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));  const mins  = Math.floor((des % (1000 * 60 * 60)) / (1000 * 60));  const secs  = Math.floor((des % (1000 * 60)) / 1000);  d.innerHTML = getTrueNumber(days);  h.innerHTML = getTrueNumber(hours);  m.innerHTML = getTrueNumber(mins);  s.innerHTML = getTrueNumber(secs);  if (x <= 0) clearInterval(x);}, 1000);const getTrueNumber = x => (x < 10 ? "0" + x : x);</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;title&gt;春节倒计时&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;style&gt;.middle{position:absolute;top:50%;
      
    
    </summary>
    
    
      <category term="新年" scheme="https://xiaohuang888.github.io/categories/%E6%96%B0%E5%B9%B4/"/>
    
    
      <category term="倒计时" scheme="https://xiaohuang888.github.io/tags/%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>「Mathematics」三角函数公式以及部分证明</title>
    <link href="https://xiaohuang888.github.io/2019/12/15/%E3%80%8CMathematics%E3%80%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E8%AF%81%E6%98%8E/"/>
    <id>https://xiaohuang888.github.io/2019/12/15/%E3%80%8CMathematics%E3%80%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E8%AF%81%E6%98%8E/</id>
    <published>2019-12-15T12:51:00.394Z</published>
    <updated>2019-12-29T13:37:58.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="https://s2.ax1x.com/2019/12/15/QhClnK.png" alt=""></p><p>在$Rt\triangle ABC$中，如下有六个三角函数的定义：</p><h4 id="正弦："><a href="#正弦：" class="headerlink" title="正弦："></a>正弦：</h4><p>$$\sin A = \frac{a}{c}$$</p><h4 id="余弦："><a href="#余弦：" class="headerlink" title="余弦："></a>余弦：</h4><p>$$\cos A = \frac{b}{c}$$</p><h4 id="正切："><a href="#正切：" class="headerlink" title="正切："></a>正切：</h4><p>$$\tan A = \frac{a}{b}$$</p><h4 id="余切："><a href="#余切：" class="headerlink" title="余切："></a>余切：</h4><p>$$\cot A = \frac{b}{a}$$</p><h4 id="正割："><a href="#正割：" class="headerlink" title="正割："></a>正割：</h4><p>$$\sec A = \frac{c}{b}$$</p><h4 id="余割："><a href="#余割：" class="headerlink" title="余割："></a>余割：</h4><p>$$\csc A = \frac{c}{a}$$</p><h3 id="关系-amp-公式"><a href="#关系-amp-公式" class="headerlink" title="关系 &amp; 公式"></a>关系 &amp; 公式</h3><h4 id="倒数关系"><a href="#倒数关系" class="headerlink" title="倒数关系"></a>倒数关系</h4><p>$$\cos \alpha \cdot \sec \alpha = 1$$</p><p>$$\sin \alpha \cdot \csc \alpha = 1$$</p><p>$$\tan \alpha \cdot \cot \alpha = 1$$</p><h4 id="平方关系"><a href="#平方关系" class="headerlink" title="平方关系"></a>平方关系</h4><p>$$1 + \tan ^ 2 \alpha = \sec ^ 2 \alpha$$</p><p>$$1 + \cot ^ 2 \alpha = \csc ^ 2 \alpha$$</p><p>$$\sin^2 \alpha + cos ^ 2 \alpha = 1$$</p><h4 id="商的关系"><a href="#商的关系" class="headerlink" title="商的关系"></a>商的关系</h4><p>$$\frac{\sin \alpha}{\cos \alpha} = \frac{\sec \alpha}{\csc \alpha} = \tan \alpha$$</p><p>$$\frac{\cos \alpha}{\sin \alpha} = \frac{\csc \alpha}{\sec \alpha} = \cot \alpha$$</p><h4 id="正弦定理"><a href="#正弦定理" class="headerlink" title="正弦定理"></a>正弦定理</h4><p>$$\frac{a}{\sin A} = \frac{b}{\sin B} = \frac{c}{\sin C} = 2R = D$$</p><p>$R$ 为三角形外切圆半径，$D$ 为三角形外切圆直径。</p><p><strong>证明：</strong></p><p><img src="https://s2.ax1x.com/2019/12/25/lFqL0x.png" alt=""></p><p>如图在 $\triangle ABC$ 中可得 $\sin A = \frac{h}{b}$ 和 $\sin B = \frac{h}{a}$ 。</p><p>$$\therefore h = \sin A \times b, h = \sin B \times a \\\ \therefore \sin A \times b = \sin B \times a \\\ \therefore \frac{\sin A}{a} = \frac{\sin B}{b} \\\ \therefore \frac{a}{\sin A} = \frac{b}{\sin B} \\\ \textrm{同理：} \frac{a}{\sin A} = \frac{c}{\sin C} \\\ \therefore \frac{a}{\sin A} = \frac{b}{\sin B} = \frac{c}{\sin C}$$</p><p><img src="https://s2.ax1x.com/2019/12/29/lKnCNQ.png" alt=""></p><p>如图， $\triangle CDB$ 中线段 $CD$ 经过圆心，所以 $\angle CBD = 90 ^ \circ$ ， $CD = 2R$。</p><p>$$\therefore \sin A = \sin D = \frac{CB}{CD} = \frac{a}{2R} \\\ \therefore \frac{a}{\sin A} = 2R \\\ \textrm{同理：} \frac{b}{\sin B} = 2R, \frac{c}{\sin C} = 2R \\\ \therefore \frac{a}{\sin A} = \frac{b}{\sin B} = \frac{c}{\sin C} = 2R = D$$</p><h4 id="余弦定理"><a href="#余弦定理" class="headerlink" title="余弦定理"></a>余弦定理</h4><h4 id="和角公式"><a href="#和角公式" class="headerlink" title="和角公式"></a>和角公式</h4><p>$$\sin(\alpha + \beta) = \sin \alpha \cos \beta + \cos \alpha \sin \beta$$</p><p>$$\sin(\alpha - \beta) = \sin \alpha \cos \beta - \cos \alpha \sin \beta$$</p><p>$$\cos(\alpha + \beta) = \cos \alpha \cos \beta - \sin \alpha \sin \beta$$</p><p>$$\cos(\alpha - \beta) = \cos \alpha \cos \beta + \sin \alpha \sin \beta$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/12/15/QhClnK.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在$
      
    
    </summary>
    
    
      <category term="Mathematics" scheme="https://xiaohuang888.github.io/categories/Mathematics/"/>
    
    
      <category term="Mathematics" scheme="https://xiaohuang888.github.io/tags/Mathematics/"/>
    
      <category term="三角函数" scheme="https://xiaohuang888.github.io/tags/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「AT1175」ニコニコ文字列</title>
    <link href="https://xiaohuang888.github.io/2019/12/14/%E3%80%8CAT1175%E3%80%8D%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E6%96%87%E5%AD%97%E5%88%97/"/>
    <id>https://xiaohuang888.github.io/2019/12/14/%E3%80%8CAT1175%E3%80%8D%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E6%96%87%E5%AD%97%E5%88%97/</id>
    <published>2019-12-14T02:13:48.358Z</published>
    <updated>2019-12-14T03:15:22.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://dwango2015-prelims.contest.atcoder.jp/tasks/dwango2015_prelims_2" target="_blank" rel="noopener">Atcoder</a></p><p>Portal2: <a href="https://www.luogu.com.cn/problem/AT1175" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>$0$ から $9$ の数字から成る文字列 $S$ が与えられます。</p><p>ある文字列 $X$ について、$X=$”$25$” または $X=$”$2525$” または $X=$”$252525$” …… というふうに “$25$” を何回か繰り返した文字列になっているとき、$X$ はニコニコ文字列であるといいます。 たとえば “$25$” や “$25252525$” はニコニコ文字列ですが、”$123$” や “$225$” はニコニコ文字列ではありません。</p><p>あなたの仕事は、文字列 $S$ について、ニコニコ文字列となるような連続した部分文字列の取り出し方が何通りあるかを答えることです。 文字列として同じであっても、取り出し位置が異なっていれば別々に数えます。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>入力は以下の形式で標準入力から与えられる。</p><p>$S$</p><p>$1$ 行目には、文字列 $S$ が与えられる。Sの長さは $1$ 以上 $100,000$ 以下である。また、$S$ の各文字は $0$ から $9$ の数字のみから成る。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>$1$ 行目には、文字列 $S$ からニコニコ文字列となるような連続した部分文字列を取り出す方法が何通りあるかを出力せよ。</p><p><strong>行末の改行を忘れると不正解と判定されるので注意すること。</strong></p><h3 id="Sample-Input1"><a href="#Sample-Input1" class="headerlink" title="Sample Input1"></a>Sample Input1</h3><pre><code>2525</code></pre><h3 id="Sample-Output1"><a href="#Sample-Output1" class="headerlink" title="Sample Output1"></a>Sample Output1</h3><pre><code>3</code></pre><h3 id="Sample-Input2"><a href="#Sample-Input2" class="headerlink" title="Sample Input2"></a>Sample Input2</h3><pre><code>1251251252525</code></pre><h3 id="Sample-Output2"><a href="#Sample-Output2" class="headerlink" title="Sample Output2"></a>Sample Output2</h3><pre><code>8</code></pre><h3 id="Sample-Input3"><a href="#Sample-Input3" class="headerlink" title="Sample Input3"></a>Sample Input3</h3><pre><code>25225</code></pre><h3 id="Sample-Output3"><a href="#Sample-Output3" class="headerlink" title="Sample Output3"></a>Sample Output3</h3><pre><code>2</code></pre><h3 id="Sample-Input4"><a href="#Sample-Input4" class="headerlink" title="Sample Input4"></a>Sample Input4</h3><pre><code>252252252252252252</code></pre><h3 id="Sample-Output4"><a href="#Sample-Output4" class="headerlink" title="Sample Output4"></a>Sample Output4</h3><pre><code>6</code></pre><h3 id="Sample-Input5"><a href="#Sample-Input5" class="headerlink" title="Sample Input5"></a>Sample Input5</h3><pre><code>20061212</code></pre><h3 id="Sample-Output5"><a href="#Sample-Output5" class="headerlink" title="Sample Output5"></a>Sample Output5</h3><pre><code>0</code></pre><h3 id="Sample-Explain1"><a href="#Sample-Explain1" class="headerlink" title="Sample Explain1"></a>Sample Explain1</h3><p>$S=$”$2525$”のケースです。部分文字列が “$25$” となる取り出し方が 2 通り、”$2525$” となる取り出し方が $1$ 通りあるので合計 $3$ 通りを出力します。</p><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>この問題には部分点が設定されています。</p><p>$N \le 2000$ を満たすデータセット $1$ にすべて正解すると、$30$ 点が得られます。 追加制約のないデータセット $2$ にすべて正解すると、上記のデータセットに加えてさらに $70$ 点が得られ、全体で $100$ 点が得られます。</p><h3 id="Description-in-Chinese"><a href="#Description-in-Chinese" class="headerlink" title="Description in Chinese"></a>Description in Chinese</h3><p>给出由$0 - 9$数字构成的字符串$S$。</p><p>对某个字符串$X$来说，如果$X=$”$25$”或$X=$”$2525$”或$X=$”$252525$”$\cdots \cdots$，$X$像这样由”$25$”重复多次组成，那么就称$X$为<code>niconico</code>字符串。例如”$25$”或”$252525$”就是<code>niconico</code>字符串，而”$123$”或”$225$”不是<code>niconico</code>字符串。</p><p>你的任务是，对于字符串$S$，请回答出$S$中有多少个子串为<code>niconico</code>字符串。即使子串相同，但是如果子串在原串中位置不同，也要分别计入总数中。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们可以先把连续的<code>25</code>都替换从一个字符，如<code>a</code>，然后我们找连续的<code>25</code>，每一段<code>25</code>都可以用组合数计算出<code>niconico</code>的数量。然后累加就可以了。</p><p><strong>坑：注意要开<code>long long</code>。</strong></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>string st<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> st<span class="token punctuation">;</span>    string b <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> st<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">)</span> b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">else</span> b <span class="token operator">=</span> b <span class="token operator">+</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将所有的"25"转化为'a'</span>    b <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止溢出，添加边界</span>    LL l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须要long long</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r <span class="token operator">=</span> i<span class="token punctuation">;</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计数连续一段的价值</span>            l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://dwango2015-prelims.contest.a
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="字符串" scheme="https://xiaohuang888.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="计数" scheme="https://xiaohuang888.github.io/tags/%E8%AE%A1%E6%95%B0/"/>
    
      <category term="Atcoder" scheme="https://xiaohuang888.github.io/tags/Atcoder/"/>
    
  </entry>
  
  <entry>
    <title>『模板』快速读入 &amp; 输出模板</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E6%A8%A1%E6%9D%BF%E3%80%8F%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5%20&amp;%20%E8%BE%93%E5%87%BA%E6%A8%A1%E6%9D%BF/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E6%A8%A1%E6%9D%BF%E3%80%8F%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5%20&amp;%20%E8%BE%93%E5%87%BA%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-12-11T11:59:38.039Z</published>
    <updated>2019-12-13T12:30:59.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mainly"><a href="#Mainly" class="headerlink" title="Mainly"></a>Mainly</h3><p>在卡常<del>（<code>80pts to 100pts</code>）</del>的时候，快速读入 &amp; 输出非常有用，原理就是一位一位读入（输出）。</p><h4 id="快速读入："><a href="#快速读入：" class="headerlink" title="快速读入："></a>快速读入：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp">n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="快速输出："><a href="#快速输出：" class="headerlink" title="快速输出："></a>快速输出：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例：-1"><a href="#用法示例：-1" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token function">write</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="超级输入优化："><a href="#超级输入优化：" class="headerlink" title="超级输入优化："></a>超级输入优化：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token keyword">return</span> p1 <span class="token operator">==</span> p2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1 <span class="token operator">=</span> buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">EOF</span> <span class="token operator">:</span> <span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> s <span class="token operator">=</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> s <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token function">nc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例：-2"><a href="#用法示例：-2" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="超级输出优化："><a href="#超级输出优化：" class="headerlink" title="超级输出优化："></a>超级输出优化：</h4><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pp <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">-</span> buf <span class="token operator">==</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pp <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>pp<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pc</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pc</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">fsh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pp <span class="token operator">-</span> buf<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pp <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用法示例：-3"><a href="#用法示例：-3" class="headerlink" title="用法示例："></a>用法示例：</h5><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token function">write</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mainly&quot;&gt;&lt;a href=&quot;#Mainly&quot; class=&quot;headerlink&quot; title=&quot;Mainly&quot;&gt;&lt;/a&gt;Mainly&lt;/h3&gt;&lt;p&gt;在卡常&lt;del&gt;（&lt;code&gt;80pts to 100pts&lt;/code&gt;）&lt;/del&gt;的时候，快速读入 &amp;
      
    
    </summary>
    
    
      <category term="模板" scheme="https://xiaohuang888.github.io/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="模板" scheme="https://xiaohuang888.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="卡常" scheme="https://xiaohuang888.github.io/tags/%E5%8D%A1%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>『题解』LibreOJ6278 数列分块入门 2</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6278%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%202/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6278%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%202/</id>
    <published>2019-12-11T11:59:38.035Z</published>
    <updated>2019-12-13T12:30:58.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://loj.ac/problem/6278/" target="_blank" rel="noopener">LibreOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给出一个长为$n$的数列，以及$n$个操作，操作涉及区间加法，询问区间内小于某个值$n$的元素个数。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行输入一个数字$n$。</p><p>第二行输入$n$个数字，第$i$个数字为$a_i$，以空格隔开。</p><p>接下来输入$n$行询问，每行输入四个数字$\mathrm{opt}$、$l$、$r$、$c$，以空格隔开。</p><p>若$\mathrm{opt} = 0$，表示将位于$[l, r]$的之间的数字都加$c$。</p><p>若$\mathrm{opt} = 1$，表示询问$[l, r]$中，小于$c ^ 2$的数字的个数。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每次询问，输出一行一个数字表示答案。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 2 2 30 1 3 11 1 3 21 1 4 11 2 3 2</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>302</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$100\%$的数据，$1 \le n \le 50000, -2^{31} \le \mathrm{others}$、$\mathrm{ans} \le 2^{31}-1$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先将数组分块，然后求出每一个块的最大以及最小值，修改是暴力修改边角料，整块的修改块的懒标记。</p><p>查询时，边角料还是暴力处理，对于整块：</p><ol><li><p>如果这个块的最大值小于目标值，那么答案增加块的大小，也就是块里的每个元素都符合要求；</p></li><li><p>如果这个块的最小值大于目标值，那么答案不变，也就是块里每个元素都不符合要求；</p></li><li><p>否则暴力查询。</p></li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> MAXN <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> block<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> bl<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> Max<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> Min<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> tag<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> block<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>        Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>            Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理边角料，并更新修改后每个块的最大值和最小值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        tag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">,</span> Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">,</span> Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//整块修改</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> block<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理边角料</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> block<span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token comment" spellcheck="true">//如果这个块的最大值小于目标值，那么答案增加块的大小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> val<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果这个块的最小值大于目标值，那么答案不变</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">*</span> block<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则暴力查询</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//整块的操作</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//初始化最大值和最小值</span>        Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>        Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> block <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算每个位置所属块的编号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出每个块中的最大值和最小值</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i575irc" target="_blank" rel="noopener">https://www.lanzous.com/i575irc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://loj.ac/problem/6278/&quot; target
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="LibreOJ" scheme="https://xiaohuang888.github.io/tags/LibreOJ/"/>
    
  </entry>
  
  <entry>
    <title>『题解』LibreOJ6277 数列分块入门 1</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6277%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%201/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FLibreOJ6277%20%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%201/</id>
    <published>2019-12-11T11:59:38.031Z</published>
    <updated>2019-12-13T12:30:58.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://loj.ac/problem/6277" target="_blank" rel="noopener">LibreOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给出一个长为$n$的数列，以及$n$个操作，操作涉及区间加法，单点查值。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行输入一个数字$n$。</p><p>第二行输入$n$个数字，第$i$个数字为$a_i$，以空格隔开。</p><p>接下来输入$n$行询问，每行输入四个数字$opt$、$l$、$r$、$c$，以空格隔开。</p><p>若$\texttt{opt = 0}$，表示将位于$[l,r]$的之间的数字都加$c$。</p><p>若$\texttt{opt = 1}$，表示询问$a_i$的值（$l$和$c$忽略）。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每次询问，输出一行一个数字表示答案。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 2 2 30 1 3 11 0 1 00 1 2 21 0 2 0</code></pre><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><pre><code>25</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$100\%$的数据，$1 \le n \le 50000, -2^{31} \le others, ans \le 2^{31} - 1$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>分块，先将序列分成$\sqrt{n}$块，区间加法时，整块左右的边角料暴力处理，整的块来更新懒标记。单点求值时，只要把自己的值与它所在的块的懒标记加起来就可以了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> bl<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> tag<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总块数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分块</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果区间不包含任何块</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> bl<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> bl<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理边角料</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> bl<span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理边角料</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> block<span class="token punctuation">)</span>                    tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新整块的懒标记</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> tag<span class="token punctuation">[</span>bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单点求值</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i51c8of" target="_blank" rel="noopener">https://www.lanzous.com/i51c8of</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://loj.ac/problem/6277&quot; target=
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="LibreOJ" scheme="https://xiaohuang888.github.io/tags/LibreOJ/"/>
    
  </entry>
  
  <entry>
    <title>『工具』对拍器</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E5%B7%A5%E5%85%B7%E3%80%8F%E5%AF%B9%E6%8B%8D%E5%99%A8/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E5%B7%A5%E5%85%B7%E3%80%8F%E5%AF%B9%E6%8B%8D%E5%99%A8/</id>
    <published>2019-12-11T11:59:38.027Z</published>
    <updated>2019-12-13T12:30:59.108Z</updated>
    
    <content type="html"><![CDATA[<p>我们有一个非常好的方法来检验一个算法是否正确，我们可以先打一个暴力（绝对正确的代码），再写一个数据生的工具。我们可以将暴力的程序与你写的算法进行<strong>对拍</strong>。这样就能比较准确地知道你写的算法的正确性了。</p><p><code>Windows</code>下的对拍命令（<code>.bat</code>文件）：</p><p>无文件输入输出版本：</p><pre><code>:loopgen.exe &gt; data.txt # 数据生成器A.exe &lt;data.txt&gt; A.txt # 目标程序1B.exe &lt;data.txt&gt; B.txt # 目标程序2fc A.txt B.txtif not errorlevel 1 goto looppause:end</code></pre><p>有文件输入输出版本：</p><pre><code>:loopgen.exe # 数据生成器A.exe # 目标程序1B.exe # 目标程序2fc A.txt B.txtif not errorlevel 1 goto looppause:end</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们有一个非常好的方法来检验一个算法是否正确，我们可以先打一个暴力（绝对正确的代码），再写一个数据生的工具。我们可以将暴力的程序与你写的算法进行&lt;strong&gt;对拍&lt;/strong&gt;。这样就能比较准确地知道你写的算法的正确性了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Windows&lt;/
      
    
    </summary>
    
    
      <category term="工具" scheme="https://xiaohuang888.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://xiaohuang888.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="终端" scheme="https://xiaohuang888.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="命令" scheme="https://xiaohuang888.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>『题解』BZOJ2226 [Spoj 5971] LCMSum</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ2226%20[Spoj%205971]%20LCMSum/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ2226%20[Spoj%205971]%20LCMSum/</id>
    <published>2019-12-11T11:59:38.023Z</published>
    <updated>2019-12-13T12:30:59.150Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2226" target="_blank" rel="noopener">BZOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given $n$, calculate the sum <code>LCM(1,n) + LCM(2,n) + .. + LCM(n,n)</code>, where <code>LCM(i,n)</code> denotes the Least Common Multiple of the integers $i$ and $n$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains $T$ the number of test cases. Each of the next $T$ lines contain an integer $n$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Output $T$ lines, one for each test case, containing the required <code>sum</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>3125</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>1455</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>$1 \le T \le 300000$，$1 \le n \le 1000000$。</p><h2 id="Description-in-Chinese"><a href="#Description-in-Chinese" class="headerlink" title="Description in Chinese"></a>Description in Chinese</h2><p>给定正整数$N$，求<code>LCM(1, N) + LCM(2, N) + ... + LCM(N, N)</code>。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>题目中的式子可以化简为：</p><p>$$\begin{align} \sum^{n}_{i = 1}{\text{lcm}(i, n)} &amp; = \sum^{n}_{i = 1}{\frac{i \times n}{\gcd(i, n)}} \\ &amp; = n \times \sum^{n}_{i = 1}{\frac{i}{\gcd(i, n)}} \\ &amp; = n \times \sum_{d | n}\sum_{i = 1}^{n}\frac{i}{d} \times (d == \gcd(i, n)) \\ &amp; = \frac{n}{d} \times \sum_{d | n}\sum^{n}_{i = 1}d == \gcd(i, n) \end{align} \\\ \text{当}\gcd(i, n) == 1 \text{时，} \gcd(n - i, n) == 1 (i, n - i \ne 1) \\\ \therefore \frac{n}{d} \times \sum_{d | n}\sum^{n}_{i = 1}d == \gcd(i, n) \\\ = \sum_{i = 1}^{n}i \times (\gcd(i, n) == 1)= n \times \frac{\varphi(d)}{2}$$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">;</span>LL n<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> phi<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">calc_phi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//计算phi函数</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> MAXN<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                phi<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> phi<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">calc_phi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> phi<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">/</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后推出的式子</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> n <span class="token operator">*</span> ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后主题要×n</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i59jdri" target="_blank" rel="noopener">https://www.lanzous.com/i59jdri</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal: &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="数论，数学" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E8%AE%BA%EF%BC%8C%E6%95%B0%E5%AD%A6/"/>
    
      <category term="BZOJ" scheme="https://xiaohuang888.github.io/tags/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu 3792」由乃与大母神原型和偶像崇拜</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%203792%E3%80%8D%E7%94%B1%E4%B9%83%E4%B8%8E%E5%A4%A7%E6%AF%8D%E7%A5%9E%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%81%B6%E5%83%8F%E5%B4%87%E6%8B%9C/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%203792%E3%80%8D%E7%94%B1%E4%B9%83%E4%B8%8E%E5%A4%A7%E6%AF%8D%E7%A5%9E%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%81%B6%E5%83%8F%E5%B4%87%E6%8B%9C/</id>
    <published>2019-12-11T11:59:38.019Z</published>
    <updated>2019-12-13T12:30:59.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P3792" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一个序列$a$</p><p>每次两个操作：</p><ol><li><p>修改$x$位置的值为$y$；</p></li><li><p>查询区间$[l, r]$是否可以重排为值域上连续的一段。</p></li></ol><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行两个数$n, m$；</p><p>第二行$n$个数表示$a[i]$；</p><p>后面m行每行三个数<code>opt x y</code>，或者<code>opt l r</code>，代表操作。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>如果可以，输出<code>damushen</code>；</p><p>否则输出<code>yuanxing</code>。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>5 51 2 3 4 52 1 52 2 32 3 31 3 62 3 5</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>damushendamushendamushendamushen</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$30\%$的数据，$n, m \le 500$；</p><p>对于$60\%$的数据，$n, m \le 100000$；</p><p>对于$100\%$的数据，$n, m \le 500000$。</p><p>值域$10 ^ 9$；</p><p>时限：$2s$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>这题很明显用线段树解决。</p><p>题目要求的是更新一个点，查询一个区间是否能够一个等差数列，我们可以线段树维护最小值，最大值以及区间平方和，在查询的时候我们先询问出最小值与最大值，为等差数列的头与尾，那么我们可以算出这个数列的长度，与题目给出的是否一致，不一致就可以输出<code>yuanxing</code>。</p><p>然后询问线段树的元素的平方和，与计算的头与尾构成的数列的平方和是否一致。</p><p>但由于<code>long long</code>自然溢出问题，计算时用暴力解决即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x7f7f7f7f</span><span class="token punctuation">,</span> MAXN <span class="token operator">=</span> <span class="token number">2000005</span><span class="token punctuation">,</span> MAXM <span class="token operator">=</span> <span class="token number">500005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> Segtree <span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">define</span> lc rt &lt;&lt; 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> rc rt &lt;&lt; 1 | 1</span>    <span class="token keyword">struct</span> node <span class="token punctuation">{</span>        <span class="token keyword">int</span> Min<span class="token punctuation">,</span> Max<span class="token punctuation">;</span>        LL sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span> tree<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>lc<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>rc<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>lc<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rc<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>lc<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rc<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> val <span class="token operator">*</span> val<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> val<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树更改</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树询问区间最小值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_min</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_min</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树询问区间最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> LL <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树询问区间平方和</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        LL ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Segtree <span class="token operator">::</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            Segtree <span class="token operator">::</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> first <span class="token operator">=</span> Segtree <span class="token operator">::</span> <span class="token function">query_min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> last <span class="token operator">=</span> Segtree <span class="token operator">::</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">!=</span> last <span class="token operator">-</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yuanxing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> first<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> Segtree <span class="token operator">::</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"damushen\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yuanxing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P37
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>「CF630C」Lucky Numbers</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF630C%E3%80%8DLucky%20Numbers/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF630C%E3%80%8DLucky%20Numbers/</id>
    <published>2019-12-11T11:59:38.016Z</published>
    <updated>2019-12-13T12:30:59.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="http://codeforces.com/problemset/problem/630/C" target="_blank" rel="noopener">Codeforces</a></p><p>Portal2: <a href="http://codeforces.com/problemset/problem/630/C" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The numbers of all offices in the new building of the Tax Office of IT City will have lucky numbers.</p><p>Lucky number is a number that consists of digits $7$ and $8$ only. Find the maximum number of offices in the new building of the Tax Office given that a door-plate can hold a number not longer than $n$ digits.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The only line of input contains one integer $n (1 \le n \le 55)$ — the maximum length of a number that a door-plate can hold.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Output one integer — the maximum number of offices, than can have unique lucky numbers not longer than $n$ digits.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>2</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>6</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>题目要我们构造$1 \sim n$位由$7, 8$的数的个数。我们先来找一找规律：</p><p>位数为$1$时：有$7, 8$，共$2 \times 2 ^ 0 = 2$种；</p><p>位数为$2$时：有$77, 78, 87, 88$，共$2 \times 2 ^ 1 = 4$种；</p><p>位数为$3$时：有$777, 778, 787, 788, 877, 878, 887, 888$共$2 \times 2 ^ 2 = 8$种；</p><p>$\cdots \cdots$</p><p>所以，位数是$n$的总个数是$2 \times 2 ^ {n - 1}$；</p><p>那么位数为$1 \sim n$的总个数为</p><p>$$\begin{aligned} \sum^{n}_{i = 1}{2 \times 2 ^ {i - 1}} &amp; = 2 \times \sum^{n}_{i = 1}{2 ^ {i - 1}} \\\ &amp; = 2 \times (2 ^ {n} - 2) \\\ &amp; = 2 ^ {n + 1} - 2\end{aligned}$$</p><p>于是就解决了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>LL n<span class="token punctuation">;</span><span class="token keyword">inline</span> LL <span class="token function">power</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//求x的y次方</span>    LL ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ret <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推出来的公式</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;http://codeforces.com/problemset/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="Codeforces" scheme="https://xiaohuang888.github.io/tags/Codeforces/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu 1349」广义斐波那契数列</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201349%E3%80%8D%E5%B9%BF%E4%B9%89%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201349%E3%80%8D%E5%B9%BF%E4%B9%89%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2019-12-11T11:59:38.012Z</published>
    <updated>2019-12-13T12:30:59.040Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P1349" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>广义的斐波那契数列是指形如$an=p \times a_{n-1}+q \times a_{n-2}$的数列。今给定数列的两系数$p$和$q$，以及数列的最前两项$a_1$和$a_2$，另给出两个整数$n$和$m$，试求数列的第$n$项$a_n$除以$m$的余数。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入包含一行6个整数。依次是$p$,$q$,$a_1$,$a_2$,$n$,$m$，其中在$p$,$q$,$a_1$,$a_2$整数范围内，$n$和$m$在长整数范围内。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出包含一行一个整数，即$a_n$除以$m$的余数。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>1 1 1 1 10 7</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>6</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>数列第$10$项是$55$，除以$7$的余数为$6$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>基本斐波那契数列矩阵是$T = \begin{bmatrix} 1 &amp; 1 \\\ 1 &amp; 0 \end{bmatrix}$；</p><p>广义斐波那契数列矩阵是$F = \begin{bmatrix} p &amp; 1 \\\ q &amp; 0 \end{bmatrix}$。</p><p>那么要求的就是：</p><p>$$\begin{aligned} F_i &amp; = F_{i - 1} \times T \\\ &amp; = \begin{bmatrix} f_{i - 1} &amp; f_{i - 2} \\\ 0 &amp; 0 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 1 \\\ 1 &amp; 0 \end{bmatrix} \\\ &amp; = \begin{bmatrix} f_{i - 1} + f_{i - 2} &amp; f_{i - 1} \\\ 0 &amp; 0 \end{bmatrix} \\\ &amp; = \begin{bmatrix} f_i &amp; f_{i - 1} \\\ 0 &amp; 0 \end{bmatrix} \end{aligned}$$</p><p>然后就可以用矩阵快速幂来解决了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">struct</span> Matrix <span class="token punctuation">{</span>    LL a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩阵清空</span>        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//单位矩阵</span>        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LL n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> mod<span class="token punctuation">;</span>Matrix F<span class="token punctuation">,</span> a<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">inline</span> LL <span class="token function">Plus</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+</span><span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> mod<span class="token punctuation">)</span> x <span class="token operator">-</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> LL <span class="token function">power</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//快速幂</span>    LL ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>Matrix <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Matrix a<span class="token punctuation">,</span> Matrix b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩阵乘法</span>    Matrix ret<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                ret<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Plus</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> <span class="token function">power</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> Matrix <span class="token function">Matrix_Power</span><span class="token punctuation">(</span>Matrix a<span class="token punctuation">,</span> LL x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//矩阵快速幂</span>    Matrix ret<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">*</span> a<span class="token punctuation">;</span>        x <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    F<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">,</span> F<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">;</span>    a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span> a<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">;</span>    ans <span class="token operator">=</span> F <span class="token operator">*</span> <span class="token function">Matrix_Power</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P13
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="数学，数论" scheme="https://xiaohuang888.github.io/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="矩阵" scheme="https://xiaohuang888.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="快速幂" scheme="https://xiaohuang888.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>「CF52C」Circular RMQ</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF52C%E3%80%8DCircular%20RMQ/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CCF52C%E3%80%8DCircular%20RMQ/</id>
    <published>2019-12-11T11:59:38.008Z</published>
    <updated>2019-12-13T12:30:59.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="http://codeforces.com/problemset/problem/52/C" target="_blank" rel="noopener">Codeforces</a></p><p>Portal2: <a href="http://codeforces.com/problemset/problem/52/C" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You are given circular array $a_0, a_1, \cdots, a_{n - 1}$. There are two types of operations with it:</p><ul><li><p>$\textrm{inc}(lf, rg, v)$ — this operation increases each element on the segment $[lf, rg]$ (inclusively) by $v$;</p></li><li><p>$\textrm{rmq}(lf, rg)$ — this operation returns minimal value on the segment $[lf, rg]$ (inclusively).</p></li></ul><p>Assume segments to be circular, so if $n = 5$ and $lf = 3, rg = 1$, it means the index sequence: $3, 4, 0, 1$.</p><p>Write program to process given sequence of operations.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains integer $n (1 \le n \le 200000)$. The next line contains initial state of the array: $a_0, a_1, \cdots, a_{n - 1} ( -10^6 \le ai \le 10^6)$, $a_i$ are integer. The third line contains integer $m (0 \le m \le 200000)$, $m$ — the number of operartons. Next $m$ lines contain one operation each. If line contains two integer $lf, rg (0 \le lf, rg \le n - 1)$ it means rmq operation, it contains three integers $lf, rg, v (0 \le lf, rg \le n - 1; -10^6 \le v \le 10^6)$ — inc operation.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each rmq operation write result for it. Please, do not use <code>%lld</code> specificator to read or write $64$-bit integers in C++. It is preffered to use cout (also you may use <code>%I64d</code>).</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 2 3 443 03 0 -10 12 1</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>100</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们可以用线段树来解决区间<code>RMQ</code>问题，我们在线段树上维护一个最小值与懒标记，这样问题就解决了。</p><p>读入的时候我们可以判断后面一个字符是不是空格，可以直接在快速读入里判断，这样就可以判断出一行有三个数还是两个数。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> opt<span class="token punctuation">;</span><span class="token keyword">namespace</span> Segtree <span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">define</span> ls rt &lt;&lt; 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> rs rt &lt;&lt; 1 | 1</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>    <span class="token keyword">const</span> LL Seg_INF <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> Seg_MAXN <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> SMT <span class="token punctuation">{</span>        LL Min<span class="token punctuation">,</span> tag<span class="token punctuation">;</span>    <span class="token punctuation">}</span> tree<span class="token punctuation">[</span>Seg_MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建立线段树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树修改</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">+</span> tree<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">+</span> tree<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> LL <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线段树查询</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>Min <span class="token operator">+</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        LL ret <span class="token operator">=</span> Seg_INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> ansr<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret <span class="token operator">+</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Segtree<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    opt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断空格</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        l <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> n<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;http://codeforces.com/problemset/pro
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="Codeforces" scheme="https://xiaohuang888.github.io/tags/Codeforces/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>「牛客练习赛53A」超越学姐爱字符串</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8C%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B53A%E3%80%8D%E8%B6%85%E8%B6%8A%E5%AD%A6%E5%A7%90%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8C%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B53A%E3%80%8D%E8%B6%85%E8%B6%8A%E5%AD%A6%E5%A7%90%E7%88%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2019-12-11T11:59:38.004Z</published>
    <updated>2019-12-13T12:30:59.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://ac.nowcoder.com/acm/contest/1114/A" target="_blank" rel="noopener">Nowcoder</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>超越学姐非常喜欢自己的名字，以至于英文字母她只喜欢$\textrm{“c”}$和$\textrm{“y”}$。因此超越学姐喜欢只含有$\textrm{“c”}$和$\textrm{“y”}$的字符串，且字符串中不能出现两个连续的$\textrm{“c”}$。请你求出有多少种长度为$n$的字符串是超越学姐喜欢的字符串。答案对$1e9 + 7$取模。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入一个整数$n$。</p><p>$1 \le n \le 100000$。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出一个整数表示答案。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>3</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>5</code></pre><h3 id="Sample-Explain"><a href="#Sample-Explain" class="headerlink" title="Sample Explain"></a>Sample Explain</h3><blockquote><p>$\textrm{cyy, cyc, yyy, yyc, ycy}$。</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们通过枚举可以发现</p><p>当$n = 1$时，答案为$2$：<code>c, y</code>；</p><p>当$n = 2$时，答案为$3$：<code>cy, yc, yy</code>；</p><p>当$n = 3$时，答案为$5$：<code>cyy, cyc, yyy, yyc, ycy</code>；</p><p>当$n = 4$时，答案为$8$：<code>yyyy, yyyc, yycy, ycyy, cyyy, cycy, yccy, ycyc</code>；</p><p>当$n = 5$时，答案为$13$：<code>yyyyy, yyyyc, yyycy, yycyy, ycyyy, cyyyy, yycyc, ycyyc, cyyyc, ycycy, cyycy, cycyy, cycyc</code>；</p><p>$\cdots \cdots$</p><p>容易总结出规律：$\textrm{f(i) = f(i - 1) + f(i - 2)}(x \ge 3)$</p><p>在写完代码时，还需要对于$n = 1$时特判。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//特判n = 1的情况</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL x1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL tmp <span class="token operator">=</span> x1<span class="token punctuation">;</span>        x1 <span class="token operator">=</span> x2 <span class="token operator">%</span> mod<span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token punctuation">(</span>x2 <span class="token operator">+</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前两项的和</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> x2 <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不要忘记取余</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://ac.nowcoder.com/acm/contest/
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="动态规划" scheme="https://xiaohuang888.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="找规律" scheme="https://xiaohuang888.github.io/tags/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
    
      <category term="Nowcoder" scheme="https://xiaohuang888.github.io/tags/Nowcoder/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu 1412」经营与开发</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201412%E3%80%8D%E7%BB%8F%E8%90%A5%E4%B8%8E%E5%BC%80%E5%8F%91/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201412%E3%80%8D%E7%BB%8F%E8%90%A5%E4%B8%8E%E5%BC%80%E5%8F%91/</id>
    <published>2019-12-11T11:59:37.999Z</published>
    <updated>2019-12-13T12:30:59.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P1412" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>你驾驶着一台带有钻头（初始能力值$w$）的飞船，按既定路线依次飞过$n$个星球。</p><p>星球笼统的分为$2$类：资源型和维修型。（$p$为钻头当前能力值）</p><ol><li><p>资源型：含矿物质量$\rm a[i]$，若选择开采，则得到$a[i] \times p$的金钱，之后钻头损耗k%，即$p = p \times (1 - 0.01k)$</p></li><li><p>维修型：维护费用$\rm b[i]$，若选择维修，则支付$b[i] \times p$的金钱，之后钻头修复c%，即$p = p \times (1 + 0.01c)$</p></li></ol><p>注：维修后钻头的能力值可以超过初始值（你可以认为是翻修$+$升级）</p><p>金钱可以透支。</p><p>请作为舰长的你仔细抉择以最大化收入。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行$4$个整数$n, k, c, w$。</p><p>以下$n$行，每行$2$个整数$type, x$。</p><p>$\rm type$为$1$则代表其为资源型星球，$x$为其矿物质含量$\rm a[i]$；</p><p>$\rm type$为$2$则代表其为维修型星球，$x$为其维护费用$\rm b[i]$；</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一个实数（保留$2$位小数），表示最大的收入。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>5 50 50 101 101 202 102 201 30</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>375.00</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>【数据范围】</p><p>对于$30\%$的数据$n \le 100$；</p><p>另有$20\%$的数据$n \le 1000, k = 100$；</p><p>对于$100\%$的数据$n \le 100000, 0 \le k, c, w, a[i], b[i] \le 100$；保证答案不超过$10^9$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>很容易想到是动态规划，按题目说的，我们分为两种情况，分别为$\rm type = 1$和$\rm type = 2$，但是如果直接顺序进行$\rm dp$，发现存在后效性，无法直接确定答案，所以我们倒着来，转移方程分别为：</p><ol><li><p>当$type = 1$时：$\rm dp[i] = \max(dp[i + 1], a[i] + dp[i + 1] \times (1 - 0.01 \times k))$</p></li><li><p>当$type = 2$时，$\rm dp[i] = \max(dp[i + 1], -a[i] + dp[i + 1] \times (1 + 0.01 \times c))$</p></li></ol><p>答案就是$\rm dp[1]$。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> c<span class="token punctuation">,</span> w<span class="token punctuation">,</span> typ<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>typ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意倒着枚举</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>typ<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.01</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0.01</span> <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转移</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//乘以初始的能力值</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P14
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="动态规划" scheme="https://xiaohuang888.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>『题解』洛谷P3376 【模板】网络最大流</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P3376%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P3376%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/</id>
    <published>2019-12-11T11:59:37.995Z</published>
    <updated>2019-12-13T12:30:58.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1：<a href="https://www.luogu.com.cn/problem/P3376" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>如题，给出一个网络图，以及其源点和汇点，求出其网络最大流。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行包含四个正整数$N,M,S,T$，分别表示点的个数，有向边的个数，源点序号，汇点序号。</p><p>接下来$M$行每行包含三个正整数$u_i,v_i,w_i$，表示第$i$条有向边从$w_i$出发，到达$v_i$，边权为$w_i$（即该边最大流量为$w_i$）。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一行，包含一个正整数，即为该网络的最大流。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>4 5 4 34 2 304 3 202 3 202 1 301 3 40</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>50</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>数据规模：</p><p>对于$30\%$的数据：$N \leq 10,M \leq 25$；</p><p>对于$70\%$的数据：$N \leq 200,M \leq 1000$；</p><p>对于$100\%$的数据：$N \leq 10000,M \leq 100000$。</p><p>样例说明：</p><p>题目中存在$3$条路径：</p><p>$4 \to 2 \to 3$，该路线可通过$20$的流量</p><p>$4 \to 3$，可通过$20$的流量</p><p>$4 \to 2 \to 1 \to 3$，可通过$10$的流量（边$4 \to 2$之前已经耗费了$20$的流量）</p><p>故流量总计$20+20+10=50$，输出$50$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>模板题，求最大流。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div style="font-size:1.5em; color:#00bfff; text-shadow:0px 0px 2px rgba(246, 135, 235, 1), 0px 0px 7px rgba(246, 135, 235, 1), 0px 0px 11px rgba(246, 135, 235, 1);"><center>Emonds Karp（EK）算法</center></div><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> MAXN<span class="token operator">=</span><span class="token number">10005</span><span class="token punctuation">,</span> MAXM<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> val<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> val<span class="token punctuation">,</span> flow<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//前向星存图</span>    edge<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token operator">=</span>u<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>w<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">Emonds_Karp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>    dis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span>    pre<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类似于SPFA</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">></span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">-</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>                pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前向星存图</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">Emonds_Karp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Emonds Karp算法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>t<span class="token punctuation">;</span> i<span class="token operator">!=</span>s<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow<span class="token operator">+</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">xor</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">-</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">+</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="font-size:1.5em; color:#00bfff; text-shadow:0px 0px 2px rgba(246, 135, 235, 1), 0px 0px 7px rgba(246, 135, 235, 1), 0px 0px 11px rgba(246, 135, 235, 1);"><center>Dinic算法</center></div><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> MAXN<span class="token operator">=</span><span class="token number">10005</span><span class="token punctuation">,</span> MAXM<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> nxt<span class="token punctuation">,</span> to<span class="token punctuation">,</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> val<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//前向星存图</span>    edge<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>w<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span>v<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> flow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">==</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span> flow<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token operator">=</span>flow<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token operator">-</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">-</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>i <span class="token operator">xor</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flow<span class="token operator">-</span>ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Dinic算法</span>    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ret<span class="token operator">+</span><span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双边</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="font-size:1.5em; color:#00bfff; text-shadow:0px 0px 2px rgba(246, 135, 235, 1), 0px 0px 7px rgba(246, 135, 235, 1), 0px 0px 11px rgba(246, 135, 235, 1);"><center>Improved Shortest Augmenting Path（ISAP）算法</center></div><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> MAXN<span class="token operator">=</span><span class="token number">10005</span><span class="token punctuation">,</span> MAXM<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> val<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> head1<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> deep<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//前向星存图</span>    edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        head1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        deep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>    deep<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deep<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">==</span>n <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>                deep<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>deep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//计算</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span>INF<span class="token punctuation">,</span> u<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">!=</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token function">min</span> <span class="token punctuation">(</span>ans<span class="token punctuation">,</span>edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token operator">=</span>edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">xor</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    u<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">!=</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">-</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>        edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">xor</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">+</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>        u<span class="token operator">=</span>edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">xor</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ISAP</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//ISAP算法</span>    <span class="token keyword">int</span> u<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>deep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>deep<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">==</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">calc</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            u<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i<span class="token operator">=</span>head1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span>deep<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                u<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>                pre<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> Min<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span> Min<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> deep<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>a<span class="token punctuation">[</span>deep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>deep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>Min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            head1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">!=</span>s<span class="token punctuation">)</span> u<span class="token operator">=</span>edge<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">xor</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双边</span>    <span class="token punctuation">}</span>    <span class="token function">ISAP</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1：&lt;a href=&quot;https://www.luogu.com.cn/problem/P337
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="模板" scheme="https://xiaohuang888.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="网络流" scheme="https://xiaohuang888.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>『题解』洛谷P4016 负载平衡问题</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P4016%20%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P4016%20%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98/</id>
    <published>2019-12-11T11:59:37.992Z</published>
    <updated>2019-12-13T12:30:59.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1：<a href="https://www.luogu.com.cn/problem/P4016" target="_blank" rel="noopener">Luogu</a></p><p>Portal2: <a href="https://loj.ac/problem/6013" target="_blank" rel="noopener">LibreOJ</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>$G$公司有$n$个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使$n$个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>文件的第$1$行中有$1$个正整数$n$，表示有$n$个仓库。</p><p>第$2$行中有$n$个正整数，表示$n$个仓库的库存量。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最少搬运量。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>517 9 14 16 4</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>11</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>对于$100\%$的测试数据：$1 \leq n \leq 100$。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>虽然说是网络流<code>24</code>题，其实贪心+排序就够了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum<span class="token operator">/</span><span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尽量用位运算，比较快</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算每一个距离中间的位置</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i3juukh" target="_blank" rel="noopener">https://www.lanzous.com/i3juukh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1：&lt;a href=&quot;https://www.luogu.com.cn/problem/P401
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="LibreOJ" scheme="https://xiaohuang888.github.io/tags/LibreOJ/"/>
    
      <category term="贪心" scheme="https://xiaohuang888.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="网络流" scheme="https://xiaohuang888.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="网络流24题" scheme="https://xiaohuang888.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>『题解』BZOJ1798 [AHOI2009]维护序列</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ1798%20[AHOI2009]%E7%BB%B4%E6%8A%A4%E5%BA%8F%E5%88%97/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ1798%20[AHOI2009]%E7%BB%B4%E6%8A%A4%E5%BA%8F%E5%88%97/</id>
    <published>2019-12-11T11:59:37.987Z</published>
    <updated>2019-12-13T12:30:59.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1798" target="_blank" rel="noopener">BZOJ</a></p><p>Portal2: <a href="https://www.luogu.com.cn/problem/P2023" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>老师交给小可可一个维护数列的任务，现在小可可希望你来帮他完成。</p><p>有长为$N$的数列，不妨设为$a_1, a_2, \dots , a_N$。</p><p>有如下三种操作形式：</p><ol><li><p>把数列中的一段数全部乘一个值;</p></li><li><p>把数列中的一段数全部加一个值;</p></li><li><p>询问数列中的一段数的和，由于答案可能很大，你只需输出这个数模$P$的值。</p></li></ol><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行两个整数$N$和$P$（$1 \le P \le 1000000000$）。</p><p>第二行含有N个非负整数,从左到右依次为$a_1, a_2, \dots , a_N$，（$0 \le ai \le 1000000000,1 \le i \le N$）。</p><p>第三行有一个整数$M$，表示操作总数。</p><p>从第四行开始每行描述一个操作，输入的操作有以下三种形式：</p><p>操作$1$：<code>1 t g c</code>。表示把所有满足$t \le i \le g$的$a_i$改为$ai \times c$（$1 \le t \le g \le N, 0 \le c \le 1000000000$）。</p><p>操作$2$： <code>2 t g c</code>。表示把所有满足$t \le i \le g$的$a_i$改为$ai + c$（$1 \le t \le g \le N, 0 \le c \le 1000000000$）。</p><p>操作$3$： <code>3 t g</code>。询问所有满足$t \le i \le g$的$a_i$的和模$P$的值（$1 \le t \le g \le N$）。</p><p>同一行相邻两数之间用一个空格隔开，每行开头和末尾没有多余空格。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对每个操作$3$，按照它在输入中出现的顺序，依次输出一行一个整数表示询问结果。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>7 431 2 3 4 5 6 751 2 5 53 2 42 3 7 93 1 33 4 7</code></pre><p>###Sample Output</p><pre><code>2358</code></pre><h3 id="Sample-Explain"><a href="#Sample-Explain" class="headerlink" title="Sample Explain"></a>Sample Explain</h3><p>初始时数列为$(1, 2, 3, 4, 5, 6, 7)$。</p><p>经过第$1$次操作后，数列为$(1, 10, 15, 20, 25, 6, 7)$。</p><p>对第$2$次操作，和为$10 + 15 + 20 = 45$，模$43$的结果是$2$。</p><p>经过第$3$次操作后，数列为$(1, 10, 24, 29, 34, 15, 16)$</p><p>对第$4$次操作，和为$1 + 10 + 24 = 35$，模$43$的结果是$35$。</p><p>对第$5$次操作，和为$29 + 34 + 15 + 16 = 94$,模$43$的结果是$8$。</p><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><div class="mdui-table-fluid theme-post__card__table--flat"><table class="mdui-table mdui-table-hoverable "><thead><tr><th align="center">数据编号</th><th align="center">N</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">10</td><td align="center">10</td></tr><tr><td align="center">2</td><td align="center">1000</td><td align="center">1000</td></tr><tr><td align="center">3</td><td align="center">1000</td><td align="center">1000</td></tr><tr><td align="center">4</td><td align="center">10000</td><td align="center">10000</td></tr><tr><td align="center">5</td><td align="center">60000</td><td align="center">60000</td></tr><tr><td align="center">6</td><td align="center">70000</td><td align="center">70000</td></tr><tr><td align="center">7</td><td align="center">80000</td><td align="center">80000</td></tr><tr><td align="center">8</td><td align="center">90000</td><td align="center">90000</td></tr><tr><td align="center">9</td><td align="center">100000</td><td align="center">100000</td></tr><tr><td align="center">10</td><td align="center">100000</td><td align="center">100000</td></tr></tbody></table></div><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>线段树模板题，区间加法，区间乘法，区间求和。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">500005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mod<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>LL a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> Mul<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> Add<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span>LL x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>LL l<span class="token punctuation">,</span> LL r<span class="token punctuation">,</span> LL root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//下传懒标记</span>    LL mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>mid <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    Mul<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Mul<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    Mul<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Mul<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    Add<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Add<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    Add<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Add<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>LL l<span class="token punctuation">,</span> LL r<span class="token punctuation">,</span> LL root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建树</span>    Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        LL mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update_mul</span><span class="token punctuation">(</span>LL ansl<span class="token punctuation">,</span> LL ansr<span class="token punctuation">,</span> LL val<span class="token punctuation">,</span> LL l<span class="token punctuation">,</span> LL r<span class="token punctuation">,</span> LL root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//区间乘法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">&lt;</span> l <span class="token operator">||</span> r <span class="token operator">&lt;</span> ansl<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">*</span> val<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Mul<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">*</span> val<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">*</span> val<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">update_mul</span><span class="token punctuation">(</span>ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_mul</span><span class="token punctuation">(</span>ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update_add</span><span class="token punctuation">(</span>LL ansl<span class="token punctuation">,</span> LL ansr<span class="token punctuation">,</span> LL val<span class="token punctuation">,</span> LL l<span class="token punctuation">,</span> LL r<span class="token punctuation">,</span> LL root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//区间加法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">&lt;</span> l <span class="token operator">||</span> r <span class="token operator">&lt;</span> ansl<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Add<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> val<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">update_add</span><span class="token punctuation">(</span>ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_add</span><span class="token punctuation">(</span>ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> LL <span class="token function">query</span><span class="token punctuation">(</span>LL ansl<span class="token punctuation">,</span> LL ansr<span class="token punctuation">,</span> LL l<span class="token punctuation">,</span> LL r<span class="token punctuation">,</span> LL root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//区间询问</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">&lt;</span> l <span class="token operator">||</span> r <span class="token operator">&lt;</span> ansl<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update_mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i5180sh" target="_blank" rel="noopener">https://www.lanzous.com/i5180sh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/pr
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="线段树" scheme="https://xiaohuang888.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分块" scheme="https://xiaohuang888.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="BZOJ" scheme="https://xiaohuang888.github.io/tags/BZOJ/"/>
    
      <category term="AHOI" scheme="https://xiaohuang888.github.io/tags/AHOI/"/>
    
  </entry>
  
  <entry>
    <title>『题解』BZOJ1036 [ZJOI2008]树的统计</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ1036%20[ZJOI2008]%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FBZOJ1036%20[ZJOI2008]%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1/</id>
    <published>2019-12-11T11:59:37.982Z</published>
    <updated>2019-12-13T12:30:59.133Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1036" target="_blank" rel="noopener">BZOJ</a></p><p>Portal2: <a href="https://www.luogu.com.cn/problem/P2590" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>一棵树上有$n$个节点，编号分别为$1$到$n$，每个节点都有一个权值$w$。</p><p>我们将以下面的形式来要求你对这棵树完成一些操作：</p><ul><li><p><code>CHANGE u t</code>： 把结点$u$的权值改为$t$；</p></li><li><p><code>QMAX u v</code>： 询问从点$u$到点$v$的路径上的节点的最大权值；</p></li><li><p><code>QSUM u v</code>： 询问从点$u$到点$v$的路径上的节点的权值和。</p></li></ul><p>注意：从点$u$到点$v$的路径上的节点包括$u$和$v$本身。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入文件的第一行为一个整数$n$，表示节点的个数。</p><p>接下来$n – 1$行，每行$2$个整数$a$和$b$，表示节点$a$和节点$b$之间有一条边相连。</p><p>接下来一行$n$个整数，第i个整数$w_i$表示节点$i$的权值。</p><p>接下来$1$行，为一个整数$q$，表示操作的总数。</p><p>接下来$q$行，每行一个操作，以<code>CHANGE u t</code>或者<code>QMAX u v</code>或者<code>QSUM u v</code>的形式给出。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每个<code>QMAX</code>或者<code>QSUM</code>的操作，每行输出一个整数表示要求输出的结果。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>41 22 34 14 2 1 312QMAX 3 4QMAX 3 3QMAX 3 2QMAX 2 3QSUM 3 4QSUM 2 1CHANGE 1 5QMAX 3 4CHANGE 3 6QMAX 3 4QMAX 2 4QSUM 3 4</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>412210656516</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>同<a href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86">『题解』洛谷P3384 【模板】树链剖分</a>。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> MAXN <span class="token operator">=</span> <span class="token number">400005</span><span class="token punctuation">;</span><span class="token keyword">struct</span> EDGE <span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> Max<span class="token punctuation">,</span> size<span class="token punctuation">,</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span> tree<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> son<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> father<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    edge<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> u<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//预处理</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">></span> tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> son<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> topf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//预处理</span>    idx<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>    top<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> topf<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>son<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span> topf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> father<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">||</span> v <span class="token operator">==</span> son<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token punctuation">,</span> tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>Max <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">></span> mid<span class="token punctuation">)</span> ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>Max<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">></span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">tree_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//树上求和</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> idx<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> father<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> idx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">tree_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//树上求最大值</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret <span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> idx<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> father<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> idx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dep<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    father<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">tree_max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">tree_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p>测试数据下载：<a href="https://www.lanzous.com/i5182ne" target="_blank" rel="noopener">https://www.lanzous.com/i5182ne</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/pr
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="BZOJ" scheme="https://xiaohuang888.github.io/tags/BZOJ/"/>
    
      <category term="树链剖分" scheme="https://xiaohuang888.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="ZJOI" scheme="https://xiaohuang888.github.io/tags/ZJOI/"/>
    
  </entry>
  
  <entry>
    <title>『题解』洛谷P3384 【模板】树链剖分</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</id>
    <published>2019-12-11T11:59:37.977Z</published>
    <updated>2019-12-13T12:30:58.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1: <a href="https://www.luogu.com.cn/problem/P3384" target="_blank" rel="noopener">Luogu</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>如题，已知一棵包含$N$个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：</p><p>操作$1$： 格式： <code>1 x y z</code> 表示将树从x到y结点最短路径上所有节点的值都加上$z$；</p><p>操作$2$： 格式： <code>2 x y</code> 表示求树从x到y结点最短路径上所有节点的值之和；</p><p>操作$3$： 格式： <code>3 x z</code> 表示将以x为根节点的子树内所有节点值都加上$z$；</p><p>操作$4$： 格式： <code>4 x</code> 表示求以x为根节点的子树内所有节点值之和。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>第一行包含$4$个正整数$N$、$M$、$R$、$P$，分别表示树的结点个数、操作个数、根节点序号和取模数（<strong>即所有的输出结果均对此取模</strong>）。</p><p>接下来一行包含$N$个非负整数，分别依次表示各个节点上初始的数值。</p><p>接下来$N - 1$行每行包含两个整数$x$、$y$，表示点$x$和点$y$之间连有一条边（保证无环且连通）</p><p>接下来$M$行每行包含若干个正整数，每行表示一个操作，格式如下：</p><p>操作$1$： <code>1 x y z</code></p><p>操作$2$： <code>2 x y</code></p><p>操作$3$： <code>3 x z</code></p><p>操作$4$： <code>4 x</code></p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出包含若干行，分别依次表示每个操作$2$或操作$4$所得的结果（对$P$取模）。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>5 5 2 247 3 7 8 0 1 21 53 14 13 4 23 2 24 51 5 1 32 1 3</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>221</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>模板树链剖分题。</p><p>一些概念：</p><ul><li><p>重儿子：在每一个非叶子结点的儿子中，以那个儿子结点为根的子树的结点数最多的儿子为该结点的重儿子；</p></li><li><p>轻儿子：在非叶子，非重儿子结点；</p></li><li><p>重边：一个父亲结点连结它的重儿子的边；</p></li><li><p>轻边：非重边；</p></li><li><p>重链：相邻重边连起来的，连接一条重儿子结点的链叫重链。</p></li></ul><p><code>dfs1</code>的功能：</p><ul><li><p>求出每结点的深度；</p></li><li><p>求出每个结点的父亲节点；</p></li><li><p>求出每个非叶子结点的子树的大小；</p></li><li><p>求出每个非叶子结点的重儿子的编号。</p></li></ul><p><code>dfs2</code>的功能：</p><ul><li><p>处理每条链；</p></li><li><p>标记每个结点的新编号；</p></li><li><p>求出每个结点所在链的顶；</p></li><li><p>把结点的初始值更新到新编号里。</p></li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">2000005</span><span class="token punctuation">;</span><span class="token keyword">struct</span> EDGE <span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> size<span class="token punctuation">,</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span> tree<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> root<span class="token punctuation">,</span> mod<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> son<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> father<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    edge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> u<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dep[i]表示i结点的深度</span><span class="token comment" spellcheck="true">//father[i]表示i结点的父亲结点</span><span class="token comment" spellcheck="true">//son[]表示重儿子的编号</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dep<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> deep<span class="token punctuation">;</span>    father<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">;</span>    tot<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Maxson <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        tot<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> now<span class="token punctuation">,</span> deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tot<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">></span> Maxson<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Maxson <span class="token operator">=</span> tot<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            son<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tot<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> topf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    idx<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>    top<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> topf<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span> topf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idx<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">*</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">*</span> val<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update_add</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token function">update_add</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线段树操作</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">tree_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> father<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> ansl<span class="token punctuation">,</span> <span class="token keyword">int</span> ansr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> ansr<span class="token punctuation">)</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansr <span class="token operator">></span> mid<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>root <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> ansl<span class="token punctuation">,</span> ansr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">tree_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        x <span class="token operator">=</span> father<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs1</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            val <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>            <span class="token function">tree_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">tree_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> tot<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> tot<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1: &lt;a href=&quot;https://www.luogu.com.cn/problem/P33
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="模板" scheme="https://xiaohuang888.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="树链剖分" scheme="https://xiaohuang888.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>『题解』UVa11324 The Largest Clique</title>
    <link href="https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FUVa11324%20The%20Largest%20Clique/"/>
    <id>https://xiaohuang888.github.io/2019/12/11/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FUVa11324%20The%20Largest%20Clique/</id>
    <published>2019-12-11T11:59:37.972Z</published>
    <updated>2019-12-13T12:30:58.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h3><p>Portal1：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2299" target="_blank" rel="noopener">UVa</a></p><p>Portal2：<a href="https://www.luogu.com.cn/problem/UVA11324" target="_blank" rel="noopener">Luogu</a></p><p>Portal3：<a href="https://vjudge.net/problem/UVA-11324" target="_blank" rel="noopener">Vjudge</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a directed graph $\text{G}$, consider the following transformation.<br>First, create a new graph $\text{T(G)}$ to have the same vertex set as $\text{G}$. Create a directed edge between two vertices u and v in $\text{T(G)}$ if and only if there is a path between u and v in $\text{G}$ that follows the directed edges only in the forward direction. This graph $\text{T(G)}$ is often called the $\text{transitive closure}$ of $\text{G}$.<br><img src="https://i.loli.net/2019/02/23/5c7127b4a548d.png" alt=""><br>We define a $\text{clique}$ in a directed graph as a set of vertices $\text{U}$ such that for any two vertices u and v in $\text{U}$, there is a directed edge either from u to v or from v to u (or both). The size of a clique is the number of vertices in the clique.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The number of cases is given on the first line of input. Each test case describes a graph $\text{G}$. It begins with a line of two integers $n$ and $m$, where $0 \leq n \leq 1000$ is the number of vertices of $\text{G}$ and $0 \leq m \leq 50, 000$ is the number of directed edges of $\text{G}$. The vertices of $\text{G}$ are numbered from $1$ to $n$. The following $m$ lines contain two distinct integers $u$ and $v$ between $1$ and $n$ which define a directed edge from $u$ to $v$ in $\text{G}$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output a single integer that is the size of the largest clique in $\text{T(G)}$.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>15 51 22 33 14 15 2</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>4</code></pre><h3 id="Description-in-Chinese"><a href="#Description-in-Chinese" class="headerlink" title="Description in Chinese"></a>Description in Chinese</h3><p>给你一张有向图$\text{G}$，求一个结点数最大的结点集，使得该结点集中的任意两个结点 $u$ 和 $v$ 满足：要么 $u$ 可以达 $v$，要么 $v$ 可以达 $u$（$u$, $v$相互可达也行）。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><code>Tarjan</code>缩点$+$记忆化搜索。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp" mdui-tooltip="{content: 'cpp'}"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> num<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> top<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> DFN<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> sum1<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> belong<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//前向星存图</span>    edge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span>v<span class="token punctuation">;</span> edge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//初始化</span>    num<span class="token operator">=</span>cnt<span class="token operator">=</span>top<span class="token operator">=</span>tot<span class="token operator">=</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>DFN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DFN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>LOW<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LOW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>sum1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Tarjan缩点</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token punctuation">;</span>    DFN<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>    LOW<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DFN<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOW<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>LOW<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> LOW<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> LOW<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>LOW<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> DFN<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DFN<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span>LOW<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tot<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">!=</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            belong<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vis<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        belong<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//记忆化搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sum1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> addd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>belong<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>j<span class="token punctuation">;</span> j<span class="token operator">=</span>edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span> s1<span class="token operator">=</span>belong<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">==</span>s1<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                addd<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>addd<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>addd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DFN<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>tot<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//寻找最大值</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal&quot;&gt;&lt;a href=&quot;#Portal&quot; class=&quot;headerlink&quot; title=&quot;Portal&quot;&gt;&lt;/a&gt;Portal&lt;/h3&gt;&lt;p&gt;Portal1：&lt;a href=&quot;https://uva.onlinejudge.org/index.php
      
    
    </summary>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xiaohuang888.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://xiaohuang888.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="C++" scheme="https://xiaohuang888.github.io/tags/C/"/>
    
      <category term="记忆化搜索" scheme="https://xiaohuang888.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
      <category term="Tarjan" scheme="https://xiaohuang888.github.io/tags/Tarjan/"/>
    
      <category term="UVa" scheme="https://xiaohuang888.github.io/tags/UVa/"/>
    
  </entry>
  
</feed>
